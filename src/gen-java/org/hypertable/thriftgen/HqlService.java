/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.hypertable.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2014-5-16")
public class HqlService {

  /**
   * HQL service is a superset of Client service
   * 
   * It adds capability to execute HQL queries to the service
   */
  public interface Iface extends org.hypertable.thriftgen.ClientService.Iface {

    /**
     * Execute an HQL command
     * 
     * @param ns - Namespace id
     * 
     * @param command - HQL command
     * 
     * @param noflush - Do not auto commit any modifications (return a mutator)
     * 
     * @param unbuffered - return a scanner instead of buffered results
     * 
     * @param ns
     * @param command
     * @param noflush
     * @param unbuffered
     */
    public HqlResult hql_exec(long ns, String command, boolean noflush, boolean unbuffered) throws org.hypertable.thriftgen.ClientException, org.apache.thrift.TException;

    /**
     * Convenience method for executing an buffered and flushed query
     * 
     * because thrift doesn't (and probably won't) support default argument values
     * 
     * @param ns - Namespace
     * 
     * @param command - HQL command
     * 
     * @param ns
     * @param command
     */
    public HqlResult hql_query(long ns, String command) throws org.hypertable.thriftgen.ClientException, org.apache.thrift.TException;

    /**
     * @see hql_exec
     * 
     * @param ns
     * @param command
     * @param noflush
     * @param unbuffered
     */
    public HqlResultAsArrays hql_exec_as_arrays(long ns, String command, boolean noflush, boolean unbuffered) throws org.hypertable.thriftgen.ClientException, org.apache.thrift.TException;

    public HqlResult2 hql_exec2(long ns, String command, boolean noflush, boolean unbuffered) throws org.hypertable.thriftgen.ClientException, org.apache.thrift.TException;

    /**
     * @see hql_query
     * 
     * @param ns
     * @param command
     */
    public HqlResultAsArrays hql_query_as_arrays(long ns, String command) throws org.hypertable.thriftgen.ClientException, org.apache.thrift.TException;

    public HqlResult2 hql_query2(long ns, String command) throws org.hypertable.thriftgen.ClientException, org.apache.thrift.TException;

  }

  public interface AsyncIface extends org.hypertable.thriftgen.ClientService .AsyncIface {

    public void hql_exec(long ns, String command, boolean noflush, boolean unbuffered, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void hql_query(long ns, String command, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void hql_exec_as_arrays(long ns, String command, boolean noflush, boolean unbuffered, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void hql_exec2(long ns, String command, boolean noflush, boolean unbuffered, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void hql_query_as_arrays(long ns, String command, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void hql_query2(long ns, String command, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.hypertable.thriftgen.ClientService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public HqlResult hql_exec(long ns, String command, boolean noflush, boolean unbuffered) throws org.hypertable.thriftgen.ClientException, org.apache.thrift.TException
    {
      send_hql_exec(ns, command, noflush, unbuffered);
      return recv_hql_exec();
    }

    public void send_hql_exec(long ns, String command, boolean noflush, boolean unbuffered) throws org.apache.thrift.TException
    {
      hql_exec_args args = new hql_exec_args();
      args.setNs(ns);
      args.setCommand(command);
      args.setNoflush(noflush);
      args.setUnbuffered(unbuffered);
      sendBase("hql_exec", args);
    }

    public HqlResult recv_hql_exec() throws org.hypertable.thriftgen.ClientException, org.apache.thrift.TException
    {
      hql_exec_result result = new hql_exec_result();
      receiveBase(result, "hql_exec");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hql_exec failed: unknown result");
    }

    public HqlResult hql_query(long ns, String command) throws org.hypertable.thriftgen.ClientException, org.apache.thrift.TException
    {
      send_hql_query(ns, command);
      return recv_hql_query();
    }

    public void send_hql_query(long ns, String command) throws org.apache.thrift.TException
    {
      hql_query_args args = new hql_query_args();
      args.setNs(ns);
      args.setCommand(command);
      sendBase("hql_query", args);
    }

    public HqlResult recv_hql_query() throws org.hypertable.thriftgen.ClientException, org.apache.thrift.TException
    {
      hql_query_result result = new hql_query_result();
      receiveBase(result, "hql_query");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hql_query failed: unknown result");
    }

    public HqlResultAsArrays hql_exec_as_arrays(long ns, String command, boolean noflush, boolean unbuffered) throws org.hypertable.thriftgen.ClientException, org.apache.thrift.TException
    {
      send_hql_exec_as_arrays(ns, command, noflush, unbuffered);
      return recv_hql_exec_as_arrays();
    }

    public void send_hql_exec_as_arrays(long ns, String command, boolean noflush, boolean unbuffered) throws org.apache.thrift.TException
    {
      hql_exec_as_arrays_args args = new hql_exec_as_arrays_args();
      args.setNs(ns);
      args.setCommand(command);
      args.setNoflush(noflush);
      args.setUnbuffered(unbuffered);
      sendBase("hql_exec_as_arrays", args);
    }

    public HqlResultAsArrays recv_hql_exec_as_arrays() throws org.hypertable.thriftgen.ClientException, org.apache.thrift.TException
    {
      hql_exec_as_arrays_result result = new hql_exec_as_arrays_result();
      receiveBase(result, "hql_exec_as_arrays");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hql_exec_as_arrays failed: unknown result");
    }

    public HqlResult2 hql_exec2(long ns, String command, boolean noflush, boolean unbuffered) throws org.hypertable.thriftgen.ClientException, org.apache.thrift.TException
    {
      send_hql_exec2(ns, command, noflush, unbuffered);
      return recv_hql_exec2();
    }

    public void send_hql_exec2(long ns, String command, boolean noflush, boolean unbuffered) throws org.apache.thrift.TException
    {
      hql_exec2_args args = new hql_exec2_args();
      args.setNs(ns);
      args.setCommand(command);
      args.setNoflush(noflush);
      args.setUnbuffered(unbuffered);
      sendBase("hql_exec2", args);
    }

    public HqlResult2 recv_hql_exec2() throws org.hypertable.thriftgen.ClientException, org.apache.thrift.TException
    {
      hql_exec2_result result = new hql_exec2_result();
      receiveBase(result, "hql_exec2");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hql_exec2 failed: unknown result");
    }

    public HqlResultAsArrays hql_query_as_arrays(long ns, String command) throws org.hypertable.thriftgen.ClientException, org.apache.thrift.TException
    {
      send_hql_query_as_arrays(ns, command);
      return recv_hql_query_as_arrays();
    }

    public void send_hql_query_as_arrays(long ns, String command) throws org.apache.thrift.TException
    {
      hql_query_as_arrays_args args = new hql_query_as_arrays_args();
      args.setNs(ns);
      args.setCommand(command);
      sendBase("hql_query_as_arrays", args);
    }

    public HqlResultAsArrays recv_hql_query_as_arrays() throws org.hypertable.thriftgen.ClientException, org.apache.thrift.TException
    {
      hql_query_as_arrays_result result = new hql_query_as_arrays_result();
      receiveBase(result, "hql_query_as_arrays");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hql_query_as_arrays failed: unknown result");
    }

    public HqlResult2 hql_query2(long ns, String command) throws org.hypertable.thriftgen.ClientException, org.apache.thrift.TException
    {
      send_hql_query2(ns, command);
      return recv_hql_query2();
    }

    public void send_hql_query2(long ns, String command) throws org.apache.thrift.TException
    {
      hql_query2_args args = new hql_query2_args();
      args.setNs(ns);
      args.setCommand(command);
      sendBase("hql_query2", args);
    }

    public HqlResult2 recv_hql_query2() throws org.hypertable.thriftgen.ClientException, org.apache.thrift.TException
    {
      hql_query2_result result = new hql_query2_result();
      receiveBase(result, "hql_query2");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hql_query2 failed: unknown result");
    }

  }
  public static class AsyncClient extends org.hypertable.thriftgen.ClientService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void hql_exec(long ns, String command, boolean noflush, boolean unbuffered, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      hql_exec_call method_call = new hql_exec_call(ns, command, noflush, unbuffered, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class hql_exec_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String command;
      private boolean noflush;
      private boolean unbuffered;
      public hql_exec_call(long ns, String command, boolean noflush, boolean unbuffered, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.command = command;
        this.noflush = noflush;
        this.unbuffered = unbuffered;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hql_exec", org.apache.thrift.protocol.TMessageType.CALL, 0));
        hql_exec_args args = new hql_exec_args();
        args.setNs(ns);
        args.setCommand(command);
        args.setNoflush(noflush);
        args.setUnbuffered(unbuffered);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public HqlResult getResult() throws org.hypertable.thriftgen.ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_hql_exec();
      }
    }

    public void hql_query(long ns, String command, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      hql_query_call method_call = new hql_query_call(ns, command, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class hql_query_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String command;
      public hql_query_call(long ns, String command, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.command = command;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hql_query", org.apache.thrift.protocol.TMessageType.CALL, 0));
        hql_query_args args = new hql_query_args();
        args.setNs(ns);
        args.setCommand(command);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public HqlResult getResult() throws org.hypertable.thriftgen.ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_hql_query();
      }
    }

    public void hql_exec_as_arrays(long ns, String command, boolean noflush, boolean unbuffered, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      hql_exec_as_arrays_call method_call = new hql_exec_as_arrays_call(ns, command, noflush, unbuffered, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class hql_exec_as_arrays_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String command;
      private boolean noflush;
      private boolean unbuffered;
      public hql_exec_as_arrays_call(long ns, String command, boolean noflush, boolean unbuffered, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.command = command;
        this.noflush = noflush;
        this.unbuffered = unbuffered;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hql_exec_as_arrays", org.apache.thrift.protocol.TMessageType.CALL, 0));
        hql_exec_as_arrays_args args = new hql_exec_as_arrays_args();
        args.setNs(ns);
        args.setCommand(command);
        args.setNoflush(noflush);
        args.setUnbuffered(unbuffered);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public HqlResultAsArrays getResult() throws org.hypertable.thriftgen.ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_hql_exec_as_arrays();
      }
    }

    public void hql_exec2(long ns, String command, boolean noflush, boolean unbuffered, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      hql_exec2_call method_call = new hql_exec2_call(ns, command, noflush, unbuffered, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class hql_exec2_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String command;
      private boolean noflush;
      private boolean unbuffered;
      public hql_exec2_call(long ns, String command, boolean noflush, boolean unbuffered, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.command = command;
        this.noflush = noflush;
        this.unbuffered = unbuffered;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hql_exec2", org.apache.thrift.protocol.TMessageType.CALL, 0));
        hql_exec2_args args = new hql_exec2_args();
        args.setNs(ns);
        args.setCommand(command);
        args.setNoflush(noflush);
        args.setUnbuffered(unbuffered);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public HqlResult2 getResult() throws org.hypertable.thriftgen.ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_hql_exec2();
      }
    }

    public void hql_query_as_arrays(long ns, String command, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      hql_query_as_arrays_call method_call = new hql_query_as_arrays_call(ns, command, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class hql_query_as_arrays_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String command;
      public hql_query_as_arrays_call(long ns, String command, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.command = command;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hql_query_as_arrays", org.apache.thrift.protocol.TMessageType.CALL, 0));
        hql_query_as_arrays_args args = new hql_query_as_arrays_args();
        args.setNs(ns);
        args.setCommand(command);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public HqlResultAsArrays getResult() throws org.hypertable.thriftgen.ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_hql_query_as_arrays();
      }
    }

    public void hql_query2(long ns, String command, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      hql_query2_call method_call = new hql_query2_call(ns, command, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class hql_query2_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String command;
      public hql_query2_call(long ns, String command, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.command = command;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hql_query2", org.apache.thrift.protocol.TMessageType.CALL, 0));
        hql_query2_args args = new hql_query2_args();
        args.setNs(ns);
        args.setCommand(command);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public HqlResult2 getResult() throws org.hypertable.thriftgen.ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_hql_query2();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.hypertable.thriftgen.ClientService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("hql_exec", new hql_exec());
      processMap.put("hql_query", new hql_query());
      processMap.put("hql_exec_as_arrays", new hql_exec_as_arrays());
      processMap.put("hql_exec2", new hql_exec2());
      processMap.put("hql_query_as_arrays", new hql_query_as_arrays());
      processMap.put("hql_query2", new hql_query2());
      return processMap;
    }

    public static class hql_exec<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hql_exec_args> {
      public hql_exec() {
        super("hql_exec");
      }

      public hql_exec_args getEmptyArgsInstance() {
        return new hql_exec_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public hql_exec_result getResult(I iface, hql_exec_args args) throws org.apache.thrift.TException {
        hql_exec_result result = new hql_exec_result();
        try {
          result.success = iface.hql_exec(args.ns, args.command, args.noflush, args.unbuffered);
        } catch (org.hypertable.thriftgen.ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class hql_query<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hql_query_args> {
      public hql_query() {
        super("hql_query");
      }

      public hql_query_args getEmptyArgsInstance() {
        return new hql_query_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public hql_query_result getResult(I iface, hql_query_args args) throws org.apache.thrift.TException {
        hql_query_result result = new hql_query_result();
        try {
          result.success = iface.hql_query(args.ns, args.command);
        } catch (org.hypertable.thriftgen.ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class hql_exec_as_arrays<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hql_exec_as_arrays_args> {
      public hql_exec_as_arrays() {
        super("hql_exec_as_arrays");
      }

      public hql_exec_as_arrays_args getEmptyArgsInstance() {
        return new hql_exec_as_arrays_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public hql_exec_as_arrays_result getResult(I iface, hql_exec_as_arrays_args args) throws org.apache.thrift.TException {
        hql_exec_as_arrays_result result = new hql_exec_as_arrays_result();
        try {
          result.success = iface.hql_exec_as_arrays(args.ns, args.command, args.noflush, args.unbuffered);
        } catch (org.hypertable.thriftgen.ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class hql_exec2<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hql_exec2_args> {
      public hql_exec2() {
        super("hql_exec2");
      }

      public hql_exec2_args getEmptyArgsInstance() {
        return new hql_exec2_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public hql_exec2_result getResult(I iface, hql_exec2_args args) throws org.apache.thrift.TException {
        hql_exec2_result result = new hql_exec2_result();
        try {
          result.success = iface.hql_exec2(args.ns, args.command, args.noflush, args.unbuffered);
        } catch (org.hypertable.thriftgen.ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class hql_query_as_arrays<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hql_query_as_arrays_args> {
      public hql_query_as_arrays() {
        super("hql_query_as_arrays");
      }

      public hql_query_as_arrays_args getEmptyArgsInstance() {
        return new hql_query_as_arrays_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public hql_query_as_arrays_result getResult(I iface, hql_query_as_arrays_args args) throws org.apache.thrift.TException {
        hql_query_as_arrays_result result = new hql_query_as_arrays_result();
        try {
          result.success = iface.hql_query_as_arrays(args.ns, args.command);
        } catch (org.hypertable.thriftgen.ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class hql_query2<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hql_query2_args> {
      public hql_query2() {
        super("hql_query2");
      }

      public hql_query2_args getEmptyArgsInstance() {
        return new hql_query2_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public hql_query2_result getResult(I iface, hql_query2_args args) throws org.apache.thrift.TException {
        hql_query2_result result = new hql_query2_result();
        try {
          result.success = iface.hql_query2(args.ns, args.command);
        } catch (org.hypertable.thriftgen.ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.hypertable.thriftgen.ClientService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("hql_exec", new hql_exec());
      processMap.put("hql_query", new hql_query());
      processMap.put("hql_exec_as_arrays", new hql_exec_as_arrays());
      processMap.put("hql_exec2", new hql_exec2());
      processMap.put("hql_query_as_arrays", new hql_query_as_arrays());
      processMap.put("hql_query2", new hql_query2());
      return processMap;
    }

    public static class hql_exec<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hql_exec_args, HqlResult> {
      public hql_exec() {
        super("hql_exec");
      }

      public hql_exec_args getEmptyArgsInstance() {
        return new hql_exec_args();
      }

      public AsyncMethodCallback<HqlResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<HqlResult>() { 
          public void onComplete(HqlResult o) {
            hql_exec_result result = new hql_exec_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            hql_exec_result result = new hql_exec_result();
            if (e instanceof org.hypertable.thriftgen.ClientException) {
                        result.e = (org.hypertable.thriftgen.ClientException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, hql_exec_args args, org.apache.thrift.async.AsyncMethodCallback<HqlResult> resultHandler) throws TException {
        iface.hql_exec(args.ns, args.command, args.noflush, args.unbuffered,resultHandler);
      }
    }

    public static class hql_query<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hql_query_args, HqlResult> {
      public hql_query() {
        super("hql_query");
      }

      public hql_query_args getEmptyArgsInstance() {
        return new hql_query_args();
      }

      public AsyncMethodCallback<HqlResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<HqlResult>() { 
          public void onComplete(HqlResult o) {
            hql_query_result result = new hql_query_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            hql_query_result result = new hql_query_result();
            if (e instanceof org.hypertable.thriftgen.ClientException) {
                        result.e = (org.hypertable.thriftgen.ClientException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, hql_query_args args, org.apache.thrift.async.AsyncMethodCallback<HqlResult> resultHandler) throws TException {
        iface.hql_query(args.ns, args.command,resultHandler);
      }
    }

    public static class hql_exec_as_arrays<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hql_exec_as_arrays_args, HqlResultAsArrays> {
      public hql_exec_as_arrays() {
        super("hql_exec_as_arrays");
      }

      public hql_exec_as_arrays_args getEmptyArgsInstance() {
        return new hql_exec_as_arrays_args();
      }

      public AsyncMethodCallback<HqlResultAsArrays> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<HqlResultAsArrays>() { 
          public void onComplete(HqlResultAsArrays o) {
            hql_exec_as_arrays_result result = new hql_exec_as_arrays_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            hql_exec_as_arrays_result result = new hql_exec_as_arrays_result();
            if (e instanceof org.hypertable.thriftgen.ClientException) {
                        result.e = (org.hypertable.thriftgen.ClientException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, hql_exec_as_arrays_args args, org.apache.thrift.async.AsyncMethodCallback<HqlResultAsArrays> resultHandler) throws TException {
        iface.hql_exec_as_arrays(args.ns, args.command, args.noflush, args.unbuffered,resultHandler);
      }
    }

    public static class hql_exec2<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hql_exec2_args, HqlResult2> {
      public hql_exec2() {
        super("hql_exec2");
      }

      public hql_exec2_args getEmptyArgsInstance() {
        return new hql_exec2_args();
      }

      public AsyncMethodCallback<HqlResult2> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<HqlResult2>() { 
          public void onComplete(HqlResult2 o) {
            hql_exec2_result result = new hql_exec2_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            hql_exec2_result result = new hql_exec2_result();
            if (e instanceof org.hypertable.thriftgen.ClientException) {
                        result.e = (org.hypertable.thriftgen.ClientException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, hql_exec2_args args, org.apache.thrift.async.AsyncMethodCallback<HqlResult2> resultHandler) throws TException {
        iface.hql_exec2(args.ns, args.command, args.noflush, args.unbuffered,resultHandler);
      }
    }

    public static class hql_query_as_arrays<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hql_query_as_arrays_args, HqlResultAsArrays> {
      public hql_query_as_arrays() {
        super("hql_query_as_arrays");
      }

      public hql_query_as_arrays_args getEmptyArgsInstance() {
        return new hql_query_as_arrays_args();
      }

      public AsyncMethodCallback<HqlResultAsArrays> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<HqlResultAsArrays>() { 
          public void onComplete(HqlResultAsArrays o) {
            hql_query_as_arrays_result result = new hql_query_as_arrays_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            hql_query_as_arrays_result result = new hql_query_as_arrays_result();
            if (e instanceof org.hypertable.thriftgen.ClientException) {
                        result.e = (org.hypertable.thriftgen.ClientException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, hql_query_as_arrays_args args, org.apache.thrift.async.AsyncMethodCallback<HqlResultAsArrays> resultHandler) throws TException {
        iface.hql_query_as_arrays(args.ns, args.command,resultHandler);
      }
    }

    public static class hql_query2<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hql_query2_args, HqlResult2> {
      public hql_query2() {
        super("hql_query2");
      }

      public hql_query2_args getEmptyArgsInstance() {
        return new hql_query2_args();
      }

      public AsyncMethodCallback<HqlResult2> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<HqlResult2>() { 
          public void onComplete(HqlResult2 o) {
            hql_query2_result result = new hql_query2_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            hql_query2_result result = new hql_query2_result();
            if (e instanceof org.hypertable.thriftgen.ClientException) {
                        result.e = (org.hypertable.thriftgen.ClientException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, hql_query2_args args, org.apache.thrift.async.AsyncMethodCallback<HqlResult2> resultHandler) throws TException {
        iface.hql_query2(args.ns, args.command,resultHandler);
      }
    }

  }

  public static class hql_exec_args implements org.apache.thrift.TBase<hql_exec_args, hql_exec_args._Fields>, java.io.Serializable, Cloneable, Comparable<hql_exec_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hql_exec_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField COMMAND_FIELD_DESC = new org.apache.thrift.protocol.TField("command", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NOFLUSH_FIELD_DESC = new org.apache.thrift.protocol.TField("noflush", org.apache.thrift.protocol.TType.BOOL, (short)3);
    private static final org.apache.thrift.protocol.TField UNBUFFERED_FIELD_DESC = new org.apache.thrift.protocol.TField("unbuffered", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hql_exec_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hql_exec_argsTupleSchemeFactory());
    }

    public long ns; // required
    public String command; // required
    public boolean noflush; // required
    public boolean unbuffered; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      COMMAND((short)2, "command"),
      NOFLUSH((short)3, "noflush"),
      UNBUFFERED((short)4, "unbuffered");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // COMMAND
            return COMMAND;
          case 3: // NOFLUSH
            return NOFLUSH;
          case 4: // UNBUFFERED
            return UNBUFFERED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private static final int __NOFLUSH_ISSET_ID = 1;
    private static final int __UNBUFFERED_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.COMMAND, new org.apache.thrift.meta_data.FieldMetaData("command", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NOFLUSH, new org.apache.thrift.meta_data.FieldMetaData("noflush", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.UNBUFFERED, new org.apache.thrift.meta_data.FieldMetaData("unbuffered", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hql_exec_args.class, metaDataMap);
    }

    public hql_exec_args() {
      this.noflush = false;

      this.unbuffered = false;

    }

    public hql_exec_args(
      long ns,
      String command,
      boolean noflush,
      boolean unbuffered)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.command = command;
      this.noflush = noflush;
      setNoflushIsSet(true);
      this.unbuffered = unbuffered;
      setUnbufferedIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hql_exec_args(hql_exec_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.ns = other.ns;
      if (other.isSetCommand()) {
        this.command = other.command;
      }
      this.noflush = other.noflush;
      this.unbuffered = other.unbuffered;
    }

    public hql_exec_args deepCopy() {
      return new hql_exec_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.command = null;
      this.noflush = false;

      this.unbuffered = false;

    }

    public long getNs() {
      return this.ns;
    }

    public hql_exec_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return EncodingUtils.testBit(__isset_bitfield, __NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NS_ISSET_ID, value);
    }

    public String getCommand() {
      return this.command;
    }

    public hql_exec_args setCommand(String command) {
      this.command = command;
      return this;
    }

    public void unsetCommand() {
      this.command = null;
    }

    /** Returns true if field command is set (has been assigned a value) and false otherwise */
    public boolean isSetCommand() {
      return this.command != null;
    }

    public void setCommandIsSet(boolean value) {
      if (!value) {
        this.command = null;
      }
    }

    public boolean isNoflush() {
      return this.noflush;
    }

    public hql_exec_args setNoflush(boolean noflush) {
      this.noflush = noflush;
      setNoflushIsSet(true);
      return this;
    }

    public void unsetNoflush() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOFLUSH_ISSET_ID);
    }

    /** Returns true if field noflush is set (has been assigned a value) and false otherwise */
    public boolean isSetNoflush() {
      return EncodingUtils.testBit(__isset_bitfield, __NOFLUSH_ISSET_ID);
    }

    public void setNoflushIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOFLUSH_ISSET_ID, value);
    }

    public boolean isUnbuffered() {
      return this.unbuffered;
    }

    public hql_exec_args setUnbuffered(boolean unbuffered) {
      this.unbuffered = unbuffered;
      setUnbufferedIsSet(true);
      return this;
    }

    public void unsetUnbuffered() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNBUFFERED_ISSET_ID);
    }

    /** Returns true if field unbuffered is set (has been assigned a value) and false otherwise */
    public boolean isSetUnbuffered() {
      return EncodingUtils.testBit(__isset_bitfield, __UNBUFFERED_ISSET_ID);
    }

    public void setUnbufferedIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNBUFFERED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case COMMAND:
        if (value == null) {
          unsetCommand();
        } else {
          setCommand((String)value);
        }
        break;

      case NOFLUSH:
        if (value == null) {
          unsetNoflush();
        } else {
          setNoflush((Boolean)value);
        }
        break;

      case UNBUFFERED:
        if (value == null) {
          unsetUnbuffered();
        } else {
          setUnbuffered((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case COMMAND:
        return getCommand();

      case NOFLUSH:
        return Boolean.valueOf(isNoflush());

      case UNBUFFERED:
        return Boolean.valueOf(isUnbuffered());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case COMMAND:
        return isSetCommand();
      case NOFLUSH:
        return isSetNoflush();
      case UNBUFFERED:
        return isSetUnbuffered();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hql_exec_args)
        return this.equals((hql_exec_args)that);
      return false;
    }

    public boolean equals(hql_exec_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_command = true && this.isSetCommand();
      boolean that_present_command = true && that.isSetCommand();
      if (this_present_command || that_present_command) {
        if (!(this_present_command && that_present_command))
          return false;
        if (!this.command.equals(that.command))
          return false;
      }

      boolean this_present_noflush = true;
      boolean that_present_noflush = true;
      if (this_present_noflush || that_present_noflush) {
        if (!(this_present_noflush && that_present_noflush))
          return false;
        if (this.noflush != that.noflush)
          return false;
      }

      boolean this_present_unbuffered = true;
      boolean that_present_unbuffered = true;
      if (this_present_unbuffered || that_present_unbuffered) {
        if (!(this_present_unbuffered && that_present_unbuffered))
          return false;
        if (this.unbuffered != that.unbuffered)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ns = true;
      list.add(present_ns);
      if (present_ns)
        list.add(ns);

      boolean present_command = true && (isSetCommand());
      list.add(present_command);
      if (present_command)
        list.add(command);

      boolean present_noflush = true;
      list.add(present_noflush);
      if (present_noflush)
        list.add(noflush);

      boolean present_unbuffered = true;
      list.add(present_unbuffered);
      if (present_unbuffered)
        list.add(unbuffered);

      return list.hashCode();
    }

    @Override
    public int compareTo(hql_exec_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(other.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, other.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommand()).compareTo(other.isSetCommand());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommand()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.command, other.command);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNoflush()).compareTo(other.isSetNoflush());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNoflush()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noflush, other.noflush);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUnbuffered()).compareTo(other.isSetUnbuffered());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnbuffered()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unbuffered, other.unbuffered);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hql_exec_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("command:");
      if (this.command == null) {
        sb.append("null");
      } else {
        sb.append(this.command);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("noflush:");
      sb.append(this.noflush);
      first = false;
      if (!first) sb.append(", ");
      sb.append("unbuffered:");
      sb.append(this.unbuffered);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hql_exec_argsStandardSchemeFactory implements SchemeFactory {
      public hql_exec_argsStandardScheme getScheme() {
        return new hql_exec_argsStandardScheme();
      }
    }

    private static class hql_exec_argsStandardScheme extends StandardScheme<hql_exec_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hql_exec_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.ns = iprot.readI64();
                struct.setNsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMMAND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.command = iprot.readString();
                struct.setCommandIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NOFLUSH
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.noflush = iprot.readBool();
                struct.setNoflushIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // UNBUFFERED
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.unbuffered = iprot.readBool();
                struct.setUnbufferedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hql_exec_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NS_FIELD_DESC);
        oprot.writeI64(struct.ns);
        oprot.writeFieldEnd();
        if (struct.command != null) {
          oprot.writeFieldBegin(COMMAND_FIELD_DESC);
          oprot.writeString(struct.command);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NOFLUSH_FIELD_DESC);
        oprot.writeBool(struct.noflush);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UNBUFFERED_FIELD_DESC);
        oprot.writeBool(struct.unbuffered);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hql_exec_argsTupleSchemeFactory implements SchemeFactory {
      public hql_exec_argsTupleScheme getScheme() {
        return new hql_exec_argsTupleScheme();
      }
    }

    private static class hql_exec_argsTupleScheme extends TupleScheme<hql_exec_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hql_exec_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNs()) {
          optionals.set(0);
        }
        if (struct.isSetCommand()) {
          optionals.set(1);
        }
        if (struct.isSetNoflush()) {
          optionals.set(2);
        }
        if (struct.isSetUnbuffered()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetNs()) {
          oprot.writeI64(struct.ns);
        }
        if (struct.isSetCommand()) {
          oprot.writeString(struct.command);
        }
        if (struct.isSetNoflush()) {
          oprot.writeBool(struct.noflush);
        }
        if (struct.isSetUnbuffered()) {
          oprot.writeBool(struct.unbuffered);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hql_exec_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.ns = iprot.readI64();
          struct.setNsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.command = iprot.readString();
          struct.setCommandIsSet(true);
        }
        if (incoming.get(2)) {
          struct.noflush = iprot.readBool();
          struct.setNoflushIsSet(true);
        }
        if (incoming.get(3)) {
          struct.unbuffered = iprot.readBool();
          struct.setUnbufferedIsSet(true);
        }
      }
    }

  }

  public static class hql_exec_result implements org.apache.thrift.TBase<hql_exec_result, hql_exec_result._Fields>, java.io.Serializable, Cloneable, Comparable<hql_exec_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hql_exec_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hql_exec_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hql_exec_resultTupleSchemeFactory());
    }

    public HqlResult success; // required
    public org.hypertable.thriftgen.ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HqlResult.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hql_exec_result.class, metaDataMap);
    }

    public hql_exec_result() {
    }

    public hql_exec_result(
      HqlResult success,
      org.hypertable.thriftgen.ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hql_exec_result(hql_exec_result other) {
      if (other.isSetSuccess()) {
        this.success = new HqlResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new org.hypertable.thriftgen.ClientException(other.e);
      }
    }

    public hql_exec_result deepCopy() {
      return new hql_exec_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public HqlResult getSuccess() {
      return this.success;
    }

    public hql_exec_result setSuccess(HqlResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.hypertable.thriftgen.ClientException getE() {
      return this.e;
    }

    public hql_exec_result setE(org.hypertable.thriftgen.ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((HqlResult)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((org.hypertable.thriftgen.ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hql_exec_result)
        return this.equals((hql_exec_result)that);
      return false;
    }

    public boolean equals(hql_exec_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(hql_exec_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hql_exec_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hql_exec_resultStandardSchemeFactory implements SchemeFactory {
      public hql_exec_resultStandardScheme getScheme() {
        return new hql_exec_resultStandardScheme();
      }
    }

    private static class hql_exec_resultStandardScheme extends StandardScheme<hql_exec_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hql_exec_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new HqlResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new org.hypertable.thriftgen.ClientException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hql_exec_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hql_exec_resultTupleSchemeFactory implements SchemeFactory {
      public hql_exec_resultTupleScheme getScheme() {
        return new hql_exec_resultTupleScheme();
      }
    }

    private static class hql_exec_resultTupleScheme extends TupleScheme<hql_exec_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hql_exec_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hql_exec_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new HqlResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new org.hypertable.thriftgen.ClientException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class hql_query_args implements org.apache.thrift.TBase<hql_query_args, hql_query_args._Fields>, java.io.Serializable, Cloneable, Comparable<hql_query_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hql_query_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField COMMAND_FIELD_DESC = new org.apache.thrift.protocol.TField("command", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hql_query_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hql_query_argsTupleSchemeFactory());
    }

    public long ns; // required
    public String command; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      COMMAND((short)2, "command");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // COMMAND
            return COMMAND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.COMMAND, new org.apache.thrift.meta_data.FieldMetaData("command", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hql_query_args.class, metaDataMap);
    }

    public hql_query_args() {
    }

    public hql_query_args(
      long ns,
      String command)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.command = command;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hql_query_args(hql_query_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.ns = other.ns;
      if (other.isSetCommand()) {
        this.command = other.command;
      }
    }

    public hql_query_args deepCopy() {
      return new hql_query_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.command = null;
    }

    public long getNs() {
      return this.ns;
    }

    public hql_query_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return EncodingUtils.testBit(__isset_bitfield, __NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NS_ISSET_ID, value);
    }

    public String getCommand() {
      return this.command;
    }

    public hql_query_args setCommand(String command) {
      this.command = command;
      return this;
    }

    public void unsetCommand() {
      this.command = null;
    }

    /** Returns true if field command is set (has been assigned a value) and false otherwise */
    public boolean isSetCommand() {
      return this.command != null;
    }

    public void setCommandIsSet(boolean value) {
      if (!value) {
        this.command = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case COMMAND:
        if (value == null) {
          unsetCommand();
        } else {
          setCommand((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case COMMAND:
        return getCommand();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case COMMAND:
        return isSetCommand();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hql_query_args)
        return this.equals((hql_query_args)that);
      return false;
    }

    public boolean equals(hql_query_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_command = true && this.isSetCommand();
      boolean that_present_command = true && that.isSetCommand();
      if (this_present_command || that_present_command) {
        if (!(this_present_command && that_present_command))
          return false;
        if (!this.command.equals(that.command))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ns = true;
      list.add(present_ns);
      if (present_ns)
        list.add(ns);

      boolean present_command = true && (isSetCommand());
      list.add(present_command);
      if (present_command)
        list.add(command);

      return list.hashCode();
    }

    @Override
    public int compareTo(hql_query_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(other.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, other.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommand()).compareTo(other.isSetCommand());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommand()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.command, other.command);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hql_query_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("command:");
      if (this.command == null) {
        sb.append("null");
      } else {
        sb.append(this.command);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hql_query_argsStandardSchemeFactory implements SchemeFactory {
      public hql_query_argsStandardScheme getScheme() {
        return new hql_query_argsStandardScheme();
      }
    }

    private static class hql_query_argsStandardScheme extends StandardScheme<hql_query_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hql_query_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.ns = iprot.readI64();
                struct.setNsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMMAND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.command = iprot.readString();
                struct.setCommandIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hql_query_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NS_FIELD_DESC);
        oprot.writeI64(struct.ns);
        oprot.writeFieldEnd();
        if (struct.command != null) {
          oprot.writeFieldBegin(COMMAND_FIELD_DESC);
          oprot.writeString(struct.command);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hql_query_argsTupleSchemeFactory implements SchemeFactory {
      public hql_query_argsTupleScheme getScheme() {
        return new hql_query_argsTupleScheme();
      }
    }

    private static class hql_query_argsTupleScheme extends TupleScheme<hql_query_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hql_query_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNs()) {
          optionals.set(0);
        }
        if (struct.isSetCommand()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNs()) {
          oprot.writeI64(struct.ns);
        }
        if (struct.isSetCommand()) {
          oprot.writeString(struct.command);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hql_query_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ns = iprot.readI64();
          struct.setNsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.command = iprot.readString();
          struct.setCommandIsSet(true);
        }
      }
    }

  }

  public static class hql_query_result implements org.apache.thrift.TBase<hql_query_result, hql_query_result._Fields>, java.io.Serializable, Cloneable, Comparable<hql_query_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hql_query_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hql_query_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hql_query_resultTupleSchemeFactory());
    }

    public HqlResult success; // required
    public org.hypertable.thriftgen.ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HqlResult.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hql_query_result.class, metaDataMap);
    }

    public hql_query_result() {
    }

    public hql_query_result(
      HqlResult success,
      org.hypertable.thriftgen.ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hql_query_result(hql_query_result other) {
      if (other.isSetSuccess()) {
        this.success = new HqlResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new org.hypertable.thriftgen.ClientException(other.e);
      }
    }

    public hql_query_result deepCopy() {
      return new hql_query_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public HqlResult getSuccess() {
      return this.success;
    }

    public hql_query_result setSuccess(HqlResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.hypertable.thriftgen.ClientException getE() {
      return this.e;
    }

    public hql_query_result setE(org.hypertable.thriftgen.ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((HqlResult)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((org.hypertable.thriftgen.ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hql_query_result)
        return this.equals((hql_query_result)that);
      return false;
    }

    public boolean equals(hql_query_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(hql_query_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hql_query_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hql_query_resultStandardSchemeFactory implements SchemeFactory {
      public hql_query_resultStandardScheme getScheme() {
        return new hql_query_resultStandardScheme();
      }
    }

    private static class hql_query_resultStandardScheme extends StandardScheme<hql_query_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hql_query_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new HqlResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new org.hypertable.thriftgen.ClientException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hql_query_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hql_query_resultTupleSchemeFactory implements SchemeFactory {
      public hql_query_resultTupleScheme getScheme() {
        return new hql_query_resultTupleScheme();
      }
    }

    private static class hql_query_resultTupleScheme extends TupleScheme<hql_query_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hql_query_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hql_query_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new HqlResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new org.hypertable.thriftgen.ClientException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class hql_exec_as_arrays_args implements org.apache.thrift.TBase<hql_exec_as_arrays_args, hql_exec_as_arrays_args._Fields>, java.io.Serializable, Cloneable, Comparable<hql_exec_as_arrays_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hql_exec_as_arrays_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField COMMAND_FIELD_DESC = new org.apache.thrift.protocol.TField("command", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NOFLUSH_FIELD_DESC = new org.apache.thrift.protocol.TField("noflush", org.apache.thrift.protocol.TType.BOOL, (short)3);
    private static final org.apache.thrift.protocol.TField UNBUFFERED_FIELD_DESC = new org.apache.thrift.protocol.TField("unbuffered", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hql_exec_as_arrays_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hql_exec_as_arrays_argsTupleSchemeFactory());
    }

    public long ns; // required
    public String command; // required
    public boolean noflush; // required
    public boolean unbuffered; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      COMMAND((short)2, "command"),
      NOFLUSH((short)3, "noflush"),
      UNBUFFERED((short)4, "unbuffered");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // COMMAND
            return COMMAND;
          case 3: // NOFLUSH
            return NOFLUSH;
          case 4: // UNBUFFERED
            return UNBUFFERED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private static final int __NOFLUSH_ISSET_ID = 1;
    private static final int __UNBUFFERED_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.COMMAND, new org.apache.thrift.meta_data.FieldMetaData("command", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NOFLUSH, new org.apache.thrift.meta_data.FieldMetaData("noflush", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.UNBUFFERED, new org.apache.thrift.meta_data.FieldMetaData("unbuffered", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hql_exec_as_arrays_args.class, metaDataMap);
    }

    public hql_exec_as_arrays_args() {
      this.noflush = false;

      this.unbuffered = false;

    }

    public hql_exec_as_arrays_args(
      long ns,
      String command,
      boolean noflush,
      boolean unbuffered)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.command = command;
      this.noflush = noflush;
      setNoflushIsSet(true);
      this.unbuffered = unbuffered;
      setUnbufferedIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hql_exec_as_arrays_args(hql_exec_as_arrays_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.ns = other.ns;
      if (other.isSetCommand()) {
        this.command = other.command;
      }
      this.noflush = other.noflush;
      this.unbuffered = other.unbuffered;
    }

    public hql_exec_as_arrays_args deepCopy() {
      return new hql_exec_as_arrays_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.command = null;
      this.noflush = false;

      this.unbuffered = false;

    }

    public long getNs() {
      return this.ns;
    }

    public hql_exec_as_arrays_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return EncodingUtils.testBit(__isset_bitfield, __NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NS_ISSET_ID, value);
    }

    public String getCommand() {
      return this.command;
    }

    public hql_exec_as_arrays_args setCommand(String command) {
      this.command = command;
      return this;
    }

    public void unsetCommand() {
      this.command = null;
    }

    /** Returns true if field command is set (has been assigned a value) and false otherwise */
    public boolean isSetCommand() {
      return this.command != null;
    }

    public void setCommandIsSet(boolean value) {
      if (!value) {
        this.command = null;
      }
    }

    public boolean isNoflush() {
      return this.noflush;
    }

    public hql_exec_as_arrays_args setNoflush(boolean noflush) {
      this.noflush = noflush;
      setNoflushIsSet(true);
      return this;
    }

    public void unsetNoflush() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOFLUSH_ISSET_ID);
    }

    /** Returns true if field noflush is set (has been assigned a value) and false otherwise */
    public boolean isSetNoflush() {
      return EncodingUtils.testBit(__isset_bitfield, __NOFLUSH_ISSET_ID);
    }

    public void setNoflushIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOFLUSH_ISSET_ID, value);
    }

    public boolean isUnbuffered() {
      return this.unbuffered;
    }

    public hql_exec_as_arrays_args setUnbuffered(boolean unbuffered) {
      this.unbuffered = unbuffered;
      setUnbufferedIsSet(true);
      return this;
    }

    public void unsetUnbuffered() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNBUFFERED_ISSET_ID);
    }

    /** Returns true if field unbuffered is set (has been assigned a value) and false otherwise */
    public boolean isSetUnbuffered() {
      return EncodingUtils.testBit(__isset_bitfield, __UNBUFFERED_ISSET_ID);
    }

    public void setUnbufferedIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNBUFFERED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case COMMAND:
        if (value == null) {
          unsetCommand();
        } else {
          setCommand((String)value);
        }
        break;

      case NOFLUSH:
        if (value == null) {
          unsetNoflush();
        } else {
          setNoflush((Boolean)value);
        }
        break;

      case UNBUFFERED:
        if (value == null) {
          unsetUnbuffered();
        } else {
          setUnbuffered((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case COMMAND:
        return getCommand();

      case NOFLUSH:
        return Boolean.valueOf(isNoflush());

      case UNBUFFERED:
        return Boolean.valueOf(isUnbuffered());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case COMMAND:
        return isSetCommand();
      case NOFLUSH:
        return isSetNoflush();
      case UNBUFFERED:
        return isSetUnbuffered();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hql_exec_as_arrays_args)
        return this.equals((hql_exec_as_arrays_args)that);
      return false;
    }

    public boolean equals(hql_exec_as_arrays_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_command = true && this.isSetCommand();
      boolean that_present_command = true && that.isSetCommand();
      if (this_present_command || that_present_command) {
        if (!(this_present_command && that_present_command))
          return false;
        if (!this.command.equals(that.command))
          return false;
      }

      boolean this_present_noflush = true;
      boolean that_present_noflush = true;
      if (this_present_noflush || that_present_noflush) {
        if (!(this_present_noflush && that_present_noflush))
          return false;
        if (this.noflush != that.noflush)
          return false;
      }

      boolean this_present_unbuffered = true;
      boolean that_present_unbuffered = true;
      if (this_present_unbuffered || that_present_unbuffered) {
        if (!(this_present_unbuffered && that_present_unbuffered))
          return false;
        if (this.unbuffered != that.unbuffered)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ns = true;
      list.add(present_ns);
      if (present_ns)
        list.add(ns);

      boolean present_command = true && (isSetCommand());
      list.add(present_command);
      if (present_command)
        list.add(command);

      boolean present_noflush = true;
      list.add(present_noflush);
      if (present_noflush)
        list.add(noflush);

      boolean present_unbuffered = true;
      list.add(present_unbuffered);
      if (present_unbuffered)
        list.add(unbuffered);

      return list.hashCode();
    }

    @Override
    public int compareTo(hql_exec_as_arrays_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(other.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, other.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommand()).compareTo(other.isSetCommand());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommand()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.command, other.command);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNoflush()).compareTo(other.isSetNoflush());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNoflush()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noflush, other.noflush);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUnbuffered()).compareTo(other.isSetUnbuffered());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnbuffered()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unbuffered, other.unbuffered);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hql_exec_as_arrays_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("command:");
      if (this.command == null) {
        sb.append("null");
      } else {
        sb.append(this.command);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("noflush:");
      sb.append(this.noflush);
      first = false;
      if (!first) sb.append(", ");
      sb.append("unbuffered:");
      sb.append(this.unbuffered);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hql_exec_as_arrays_argsStandardSchemeFactory implements SchemeFactory {
      public hql_exec_as_arrays_argsStandardScheme getScheme() {
        return new hql_exec_as_arrays_argsStandardScheme();
      }
    }

    private static class hql_exec_as_arrays_argsStandardScheme extends StandardScheme<hql_exec_as_arrays_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hql_exec_as_arrays_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.ns = iprot.readI64();
                struct.setNsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMMAND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.command = iprot.readString();
                struct.setCommandIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NOFLUSH
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.noflush = iprot.readBool();
                struct.setNoflushIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // UNBUFFERED
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.unbuffered = iprot.readBool();
                struct.setUnbufferedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hql_exec_as_arrays_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NS_FIELD_DESC);
        oprot.writeI64(struct.ns);
        oprot.writeFieldEnd();
        if (struct.command != null) {
          oprot.writeFieldBegin(COMMAND_FIELD_DESC);
          oprot.writeString(struct.command);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NOFLUSH_FIELD_DESC);
        oprot.writeBool(struct.noflush);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UNBUFFERED_FIELD_DESC);
        oprot.writeBool(struct.unbuffered);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hql_exec_as_arrays_argsTupleSchemeFactory implements SchemeFactory {
      public hql_exec_as_arrays_argsTupleScheme getScheme() {
        return new hql_exec_as_arrays_argsTupleScheme();
      }
    }

    private static class hql_exec_as_arrays_argsTupleScheme extends TupleScheme<hql_exec_as_arrays_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hql_exec_as_arrays_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNs()) {
          optionals.set(0);
        }
        if (struct.isSetCommand()) {
          optionals.set(1);
        }
        if (struct.isSetNoflush()) {
          optionals.set(2);
        }
        if (struct.isSetUnbuffered()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetNs()) {
          oprot.writeI64(struct.ns);
        }
        if (struct.isSetCommand()) {
          oprot.writeString(struct.command);
        }
        if (struct.isSetNoflush()) {
          oprot.writeBool(struct.noflush);
        }
        if (struct.isSetUnbuffered()) {
          oprot.writeBool(struct.unbuffered);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hql_exec_as_arrays_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.ns = iprot.readI64();
          struct.setNsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.command = iprot.readString();
          struct.setCommandIsSet(true);
        }
        if (incoming.get(2)) {
          struct.noflush = iprot.readBool();
          struct.setNoflushIsSet(true);
        }
        if (incoming.get(3)) {
          struct.unbuffered = iprot.readBool();
          struct.setUnbufferedIsSet(true);
        }
      }
    }

  }

  public static class hql_exec_as_arrays_result implements org.apache.thrift.TBase<hql_exec_as_arrays_result, hql_exec_as_arrays_result._Fields>, java.io.Serializable, Cloneable, Comparable<hql_exec_as_arrays_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hql_exec_as_arrays_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hql_exec_as_arrays_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hql_exec_as_arrays_resultTupleSchemeFactory());
    }

    public HqlResultAsArrays success; // required
    public org.hypertable.thriftgen.ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HqlResultAsArrays.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hql_exec_as_arrays_result.class, metaDataMap);
    }

    public hql_exec_as_arrays_result() {
    }

    public hql_exec_as_arrays_result(
      HqlResultAsArrays success,
      org.hypertable.thriftgen.ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hql_exec_as_arrays_result(hql_exec_as_arrays_result other) {
      if (other.isSetSuccess()) {
        this.success = new HqlResultAsArrays(other.success);
      }
      if (other.isSetE()) {
        this.e = new org.hypertable.thriftgen.ClientException(other.e);
      }
    }

    public hql_exec_as_arrays_result deepCopy() {
      return new hql_exec_as_arrays_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public HqlResultAsArrays getSuccess() {
      return this.success;
    }

    public hql_exec_as_arrays_result setSuccess(HqlResultAsArrays success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.hypertable.thriftgen.ClientException getE() {
      return this.e;
    }

    public hql_exec_as_arrays_result setE(org.hypertable.thriftgen.ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((HqlResultAsArrays)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((org.hypertable.thriftgen.ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hql_exec_as_arrays_result)
        return this.equals((hql_exec_as_arrays_result)that);
      return false;
    }

    public boolean equals(hql_exec_as_arrays_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(hql_exec_as_arrays_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hql_exec_as_arrays_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hql_exec_as_arrays_resultStandardSchemeFactory implements SchemeFactory {
      public hql_exec_as_arrays_resultStandardScheme getScheme() {
        return new hql_exec_as_arrays_resultStandardScheme();
      }
    }

    private static class hql_exec_as_arrays_resultStandardScheme extends StandardScheme<hql_exec_as_arrays_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hql_exec_as_arrays_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new HqlResultAsArrays();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new org.hypertable.thriftgen.ClientException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hql_exec_as_arrays_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hql_exec_as_arrays_resultTupleSchemeFactory implements SchemeFactory {
      public hql_exec_as_arrays_resultTupleScheme getScheme() {
        return new hql_exec_as_arrays_resultTupleScheme();
      }
    }

    private static class hql_exec_as_arrays_resultTupleScheme extends TupleScheme<hql_exec_as_arrays_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hql_exec_as_arrays_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hql_exec_as_arrays_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new HqlResultAsArrays();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new org.hypertable.thriftgen.ClientException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class hql_exec2_args implements org.apache.thrift.TBase<hql_exec2_args, hql_exec2_args._Fields>, java.io.Serializable, Cloneable, Comparable<hql_exec2_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hql_exec2_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField COMMAND_FIELD_DESC = new org.apache.thrift.protocol.TField("command", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NOFLUSH_FIELD_DESC = new org.apache.thrift.protocol.TField("noflush", org.apache.thrift.protocol.TType.BOOL, (short)3);
    private static final org.apache.thrift.protocol.TField UNBUFFERED_FIELD_DESC = new org.apache.thrift.protocol.TField("unbuffered", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hql_exec2_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hql_exec2_argsTupleSchemeFactory());
    }

    public long ns; // required
    public String command; // required
    public boolean noflush; // required
    public boolean unbuffered; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      COMMAND((short)2, "command"),
      NOFLUSH((short)3, "noflush"),
      UNBUFFERED((short)4, "unbuffered");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // COMMAND
            return COMMAND;
          case 3: // NOFLUSH
            return NOFLUSH;
          case 4: // UNBUFFERED
            return UNBUFFERED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private static final int __NOFLUSH_ISSET_ID = 1;
    private static final int __UNBUFFERED_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.COMMAND, new org.apache.thrift.meta_data.FieldMetaData("command", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NOFLUSH, new org.apache.thrift.meta_data.FieldMetaData("noflush", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.UNBUFFERED, new org.apache.thrift.meta_data.FieldMetaData("unbuffered", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hql_exec2_args.class, metaDataMap);
    }

    public hql_exec2_args() {
      this.noflush = false;

      this.unbuffered = false;

    }

    public hql_exec2_args(
      long ns,
      String command,
      boolean noflush,
      boolean unbuffered)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.command = command;
      this.noflush = noflush;
      setNoflushIsSet(true);
      this.unbuffered = unbuffered;
      setUnbufferedIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hql_exec2_args(hql_exec2_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.ns = other.ns;
      if (other.isSetCommand()) {
        this.command = other.command;
      }
      this.noflush = other.noflush;
      this.unbuffered = other.unbuffered;
    }

    public hql_exec2_args deepCopy() {
      return new hql_exec2_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.command = null;
      this.noflush = false;

      this.unbuffered = false;

    }

    public long getNs() {
      return this.ns;
    }

    public hql_exec2_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return EncodingUtils.testBit(__isset_bitfield, __NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NS_ISSET_ID, value);
    }

    public String getCommand() {
      return this.command;
    }

    public hql_exec2_args setCommand(String command) {
      this.command = command;
      return this;
    }

    public void unsetCommand() {
      this.command = null;
    }

    /** Returns true if field command is set (has been assigned a value) and false otherwise */
    public boolean isSetCommand() {
      return this.command != null;
    }

    public void setCommandIsSet(boolean value) {
      if (!value) {
        this.command = null;
      }
    }

    public boolean isNoflush() {
      return this.noflush;
    }

    public hql_exec2_args setNoflush(boolean noflush) {
      this.noflush = noflush;
      setNoflushIsSet(true);
      return this;
    }

    public void unsetNoflush() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOFLUSH_ISSET_ID);
    }

    /** Returns true if field noflush is set (has been assigned a value) and false otherwise */
    public boolean isSetNoflush() {
      return EncodingUtils.testBit(__isset_bitfield, __NOFLUSH_ISSET_ID);
    }

    public void setNoflushIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOFLUSH_ISSET_ID, value);
    }

    public boolean isUnbuffered() {
      return this.unbuffered;
    }

    public hql_exec2_args setUnbuffered(boolean unbuffered) {
      this.unbuffered = unbuffered;
      setUnbufferedIsSet(true);
      return this;
    }

    public void unsetUnbuffered() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNBUFFERED_ISSET_ID);
    }

    /** Returns true if field unbuffered is set (has been assigned a value) and false otherwise */
    public boolean isSetUnbuffered() {
      return EncodingUtils.testBit(__isset_bitfield, __UNBUFFERED_ISSET_ID);
    }

    public void setUnbufferedIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNBUFFERED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case COMMAND:
        if (value == null) {
          unsetCommand();
        } else {
          setCommand((String)value);
        }
        break;

      case NOFLUSH:
        if (value == null) {
          unsetNoflush();
        } else {
          setNoflush((Boolean)value);
        }
        break;

      case UNBUFFERED:
        if (value == null) {
          unsetUnbuffered();
        } else {
          setUnbuffered((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case COMMAND:
        return getCommand();

      case NOFLUSH:
        return Boolean.valueOf(isNoflush());

      case UNBUFFERED:
        return Boolean.valueOf(isUnbuffered());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case COMMAND:
        return isSetCommand();
      case NOFLUSH:
        return isSetNoflush();
      case UNBUFFERED:
        return isSetUnbuffered();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hql_exec2_args)
        return this.equals((hql_exec2_args)that);
      return false;
    }

    public boolean equals(hql_exec2_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_command = true && this.isSetCommand();
      boolean that_present_command = true && that.isSetCommand();
      if (this_present_command || that_present_command) {
        if (!(this_present_command && that_present_command))
          return false;
        if (!this.command.equals(that.command))
          return false;
      }

      boolean this_present_noflush = true;
      boolean that_present_noflush = true;
      if (this_present_noflush || that_present_noflush) {
        if (!(this_present_noflush && that_present_noflush))
          return false;
        if (this.noflush != that.noflush)
          return false;
      }

      boolean this_present_unbuffered = true;
      boolean that_present_unbuffered = true;
      if (this_present_unbuffered || that_present_unbuffered) {
        if (!(this_present_unbuffered && that_present_unbuffered))
          return false;
        if (this.unbuffered != that.unbuffered)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ns = true;
      list.add(present_ns);
      if (present_ns)
        list.add(ns);

      boolean present_command = true && (isSetCommand());
      list.add(present_command);
      if (present_command)
        list.add(command);

      boolean present_noflush = true;
      list.add(present_noflush);
      if (present_noflush)
        list.add(noflush);

      boolean present_unbuffered = true;
      list.add(present_unbuffered);
      if (present_unbuffered)
        list.add(unbuffered);

      return list.hashCode();
    }

    @Override
    public int compareTo(hql_exec2_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(other.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, other.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommand()).compareTo(other.isSetCommand());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommand()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.command, other.command);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNoflush()).compareTo(other.isSetNoflush());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNoflush()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noflush, other.noflush);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUnbuffered()).compareTo(other.isSetUnbuffered());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnbuffered()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unbuffered, other.unbuffered);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hql_exec2_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("command:");
      if (this.command == null) {
        sb.append("null");
      } else {
        sb.append(this.command);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("noflush:");
      sb.append(this.noflush);
      first = false;
      if (!first) sb.append(", ");
      sb.append("unbuffered:");
      sb.append(this.unbuffered);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hql_exec2_argsStandardSchemeFactory implements SchemeFactory {
      public hql_exec2_argsStandardScheme getScheme() {
        return new hql_exec2_argsStandardScheme();
      }
    }

    private static class hql_exec2_argsStandardScheme extends StandardScheme<hql_exec2_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hql_exec2_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.ns = iprot.readI64();
                struct.setNsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMMAND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.command = iprot.readString();
                struct.setCommandIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NOFLUSH
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.noflush = iprot.readBool();
                struct.setNoflushIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // UNBUFFERED
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.unbuffered = iprot.readBool();
                struct.setUnbufferedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hql_exec2_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NS_FIELD_DESC);
        oprot.writeI64(struct.ns);
        oprot.writeFieldEnd();
        if (struct.command != null) {
          oprot.writeFieldBegin(COMMAND_FIELD_DESC);
          oprot.writeString(struct.command);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NOFLUSH_FIELD_DESC);
        oprot.writeBool(struct.noflush);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UNBUFFERED_FIELD_DESC);
        oprot.writeBool(struct.unbuffered);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hql_exec2_argsTupleSchemeFactory implements SchemeFactory {
      public hql_exec2_argsTupleScheme getScheme() {
        return new hql_exec2_argsTupleScheme();
      }
    }

    private static class hql_exec2_argsTupleScheme extends TupleScheme<hql_exec2_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hql_exec2_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNs()) {
          optionals.set(0);
        }
        if (struct.isSetCommand()) {
          optionals.set(1);
        }
        if (struct.isSetNoflush()) {
          optionals.set(2);
        }
        if (struct.isSetUnbuffered()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetNs()) {
          oprot.writeI64(struct.ns);
        }
        if (struct.isSetCommand()) {
          oprot.writeString(struct.command);
        }
        if (struct.isSetNoflush()) {
          oprot.writeBool(struct.noflush);
        }
        if (struct.isSetUnbuffered()) {
          oprot.writeBool(struct.unbuffered);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hql_exec2_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.ns = iprot.readI64();
          struct.setNsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.command = iprot.readString();
          struct.setCommandIsSet(true);
        }
        if (incoming.get(2)) {
          struct.noflush = iprot.readBool();
          struct.setNoflushIsSet(true);
        }
        if (incoming.get(3)) {
          struct.unbuffered = iprot.readBool();
          struct.setUnbufferedIsSet(true);
        }
      }
    }

  }

  public static class hql_exec2_result implements org.apache.thrift.TBase<hql_exec2_result, hql_exec2_result._Fields>, java.io.Serializable, Cloneable, Comparable<hql_exec2_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hql_exec2_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hql_exec2_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hql_exec2_resultTupleSchemeFactory());
    }

    public HqlResult2 success; // required
    public org.hypertable.thriftgen.ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HqlResult2.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hql_exec2_result.class, metaDataMap);
    }

    public hql_exec2_result() {
    }

    public hql_exec2_result(
      HqlResult2 success,
      org.hypertable.thriftgen.ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hql_exec2_result(hql_exec2_result other) {
      if (other.isSetSuccess()) {
        this.success = new HqlResult2(other.success);
      }
      if (other.isSetE()) {
        this.e = new org.hypertable.thriftgen.ClientException(other.e);
      }
    }

    public hql_exec2_result deepCopy() {
      return new hql_exec2_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public HqlResult2 getSuccess() {
      return this.success;
    }

    public hql_exec2_result setSuccess(HqlResult2 success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.hypertable.thriftgen.ClientException getE() {
      return this.e;
    }

    public hql_exec2_result setE(org.hypertable.thriftgen.ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((HqlResult2)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((org.hypertable.thriftgen.ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hql_exec2_result)
        return this.equals((hql_exec2_result)that);
      return false;
    }

    public boolean equals(hql_exec2_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(hql_exec2_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hql_exec2_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hql_exec2_resultStandardSchemeFactory implements SchemeFactory {
      public hql_exec2_resultStandardScheme getScheme() {
        return new hql_exec2_resultStandardScheme();
      }
    }

    private static class hql_exec2_resultStandardScheme extends StandardScheme<hql_exec2_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hql_exec2_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new HqlResult2();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new org.hypertable.thriftgen.ClientException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hql_exec2_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hql_exec2_resultTupleSchemeFactory implements SchemeFactory {
      public hql_exec2_resultTupleScheme getScheme() {
        return new hql_exec2_resultTupleScheme();
      }
    }

    private static class hql_exec2_resultTupleScheme extends TupleScheme<hql_exec2_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hql_exec2_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hql_exec2_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new HqlResult2();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new org.hypertable.thriftgen.ClientException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class hql_query_as_arrays_args implements org.apache.thrift.TBase<hql_query_as_arrays_args, hql_query_as_arrays_args._Fields>, java.io.Serializable, Cloneable, Comparable<hql_query_as_arrays_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hql_query_as_arrays_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField COMMAND_FIELD_DESC = new org.apache.thrift.protocol.TField("command", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hql_query_as_arrays_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hql_query_as_arrays_argsTupleSchemeFactory());
    }

    public long ns; // required
    public String command; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      COMMAND((short)2, "command");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // COMMAND
            return COMMAND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.COMMAND, new org.apache.thrift.meta_data.FieldMetaData("command", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hql_query_as_arrays_args.class, metaDataMap);
    }

    public hql_query_as_arrays_args() {
    }

    public hql_query_as_arrays_args(
      long ns,
      String command)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.command = command;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hql_query_as_arrays_args(hql_query_as_arrays_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.ns = other.ns;
      if (other.isSetCommand()) {
        this.command = other.command;
      }
    }

    public hql_query_as_arrays_args deepCopy() {
      return new hql_query_as_arrays_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.command = null;
    }

    public long getNs() {
      return this.ns;
    }

    public hql_query_as_arrays_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return EncodingUtils.testBit(__isset_bitfield, __NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NS_ISSET_ID, value);
    }

    public String getCommand() {
      return this.command;
    }

    public hql_query_as_arrays_args setCommand(String command) {
      this.command = command;
      return this;
    }

    public void unsetCommand() {
      this.command = null;
    }

    /** Returns true if field command is set (has been assigned a value) and false otherwise */
    public boolean isSetCommand() {
      return this.command != null;
    }

    public void setCommandIsSet(boolean value) {
      if (!value) {
        this.command = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case COMMAND:
        if (value == null) {
          unsetCommand();
        } else {
          setCommand((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case COMMAND:
        return getCommand();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case COMMAND:
        return isSetCommand();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hql_query_as_arrays_args)
        return this.equals((hql_query_as_arrays_args)that);
      return false;
    }

    public boolean equals(hql_query_as_arrays_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_command = true && this.isSetCommand();
      boolean that_present_command = true && that.isSetCommand();
      if (this_present_command || that_present_command) {
        if (!(this_present_command && that_present_command))
          return false;
        if (!this.command.equals(that.command))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ns = true;
      list.add(present_ns);
      if (present_ns)
        list.add(ns);

      boolean present_command = true && (isSetCommand());
      list.add(present_command);
      if (present_command)
        list.add(command);

      return list.hashCode();
    }

    @Override
    public int compareTo(hql_query_as_arrays_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(other.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, other.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommand()).compareTo(other.isSetCommand());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommand()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.command, other.command);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hql_query_as_arrays_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("command:");
      if (this.command == null) {
        sb.append("null");
      } else {
        sb.append(this.command);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hql_query_as_arrays_argsStandardSchemeFactory implements SchemeFactory {
      public hql_query_as_arrays_argsStandardScheme getScheme() {
        return new hql_query_as_arrays_argsStandardScheme();
      }
    }

    private static class hql_query_as_arrays_argsStandardScheme extends StandardScheme<hql_query_as_arrays_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hql_query_as_arrays_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.ns = iprot.readI64();
                struct.setNsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMMAND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.command = iprot.readString();
                struct.setCommandIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hql_query_as_arrays_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NS_FIELD_DESC);
        oprot.writeI64(struct.ns);
        oprot.writeFieldEnd();
        if (struct.command != null) {
          oprot.writeFieldBegin(COMMAND_FIELD_DESC);
          oprot.writeString(struct.command);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hql_query_as_arrays_argsTupleSchemeFactory implements SchemeFactory {
      public hql_query_as_arrays_argsTupleScheme getScheme() {
        return new hql_query_as_arrays_argsTupleScheme();
      }
    }

    private static class hql_query_as_arrays_argsTupleScheme extends TupleScheme<hql_query_as_arrays_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hql_query_as_arrays_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNs()) {
          optionals.set(0);
        }
        if (struct.isSetCommand()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNs()) {
          oprot.writeI64(struct.ns);
        }
        if (struct.isSetCommand()) {
          oprot.writeString(struct.command);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hql_query_as_arrays_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ns = iprot.readI64();
          struct.setNsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.command = iprot.readString();
          struct.setCommandIsSet(true);
        }
      }
    }

  }

  public static class hql_query_as_arrays_result implements org.apache.thrift.TBase<hql_query_as_arrays_result, hql_query_as_arrays_result._Fields>, java.io.Serializable, Cloneable, Comparable<hql_query_as_arrays_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hql_query_as_arrays_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hql_query_as_arrays_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hql_query_as_arrays_resultTupleSchemeFactory());
    }

    public HqlResultAsArrays success; // required
    public org.hypertable.thriftgen.ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HqlResultAsArrays.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hql_query_as_arrays_result.class, metaDataMap);
    }

    public hql_query_as_arrays_result() {
    }

    public hql_query_as_arrays_result(
      HqlResultAsArrays success,
      org.hypertable.thriftgen.ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hql_query_as_arrays_result(hql_query_as_arrays_result other) {
      if (other.isSetSuccess()) {
        this.success = new HqlResultAsArrays(other.success);
      }
      if (other.isSetE()) {
        this.e = new org.hypertable.thriftgen.ClientException(other.e);
      }
    }

    public hql_query_as_arrays_result deepCopy() {
      return new hql_query_as_arrays_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public HqlResultAsArrays getSuccess() {
      return this.success;
    }

    public hql_query_as_arrays_result setSuccess(HqlResultAsArrays success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.hypertable.thriftgen.ClientException getE() {
      return this.e;
    }

    public hql_query_as_arrays_result setE(org.hypertable.thriftgen.ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((HqlResultAsArrays)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((org.hypertable.thriftgen.ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hql_query_as_arrays_result)
        return this.equals((hql_query_as_arrays_result)that);
      return false;
    }

    public boolean equals(hql_query_as_arrays_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(hql_query_as_arrays_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hql_query_as_arrays_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hql_query_as_arrays_resultStandardSchemeFactory implements SchemeFactory {
      public hql_query_as_arrays_resultStandardScheme getScheme() {
        return new hql_query_as_arrays_resultStandardScheme();
      }
    }

    private static class hql_query_as_arrays_resultStandardScheme extends StandardScheme<hql_query_as_arrays_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hql_query_as_arrays_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new HqlResultAsArrays();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new org.hypertable.thriftgen.ClientException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hql_query_as_arrays_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hql_query_as_arrays_resultTupleSchemeFactory implements SchemeFactory {
      public hql_query_as_arrays_resultTupleScheme getScheme() {
        return new hql_query_as_arrays_resultTupleScheme();
      }
    }

    private static class hql_query_as_arrays_resultTupleScheme extends TupleScheme<hql_query_as_arrays_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hql_query_as_arrays_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hql_query_as_arrays_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new HqlResultAsArrays();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new org.hypertable.thriftgen.ClientException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class hql_query2_args implements org.apache.thrift.TBase<hql_query2_args, hql_query2_args._Fields>, java.io.Serializable, Cloneable, Comparable<hql_query2_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hql_query2_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField COMMAND_FIELD_DESC = new org.apache.thrift.protocol.TField("command", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hql_query2_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hql_query2_argsTupleSchemeFactory());
    }

    public long ns; // required
    public String command; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      COMMAND((short)2, "command");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // COMMAND
            return COMMAND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.COMMAND, new org.apache.thrift.meta_data.FieldMetaData("command", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hql_query2_args.class, metaDataMap);
    }

    public hql_query2_args() {
    }

    public hql_query2_args(
      long ns,
      String command)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.command = command;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hql_query2_args(hql_query2_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.ns = other.ns;
      if (other.isSetCommand()) {
        this.command = other.command;
      }
    }

    public hql_query2_args deepCopy() {
      return new hql_query2_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.command = null;
    }

    public long getNs() {
      return this.ns;
    }

    public hql_query2_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return EncodingUtils.testBit(__isset_bitfield, __NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NS_ISSET_ID, value);
    }

    public String getCommand() {
      return this.command;
    }

    public hql_query2_args setCommand(String command) {
      this.command = command;
      return this;
    }

    public void unsetCommand() {
      this.command = null;
    }

    /** Returns true if field command is set (has been assigned a value) and false otherwise */
    public boolean isSetCommand() {
      return this.command != null;
    }

    public void setCommandIsSet(boolean value) {
      if (!value) {
        this.command = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case COMMAND:
        if (value == null) {
          unsetCommand();
        } else {
          setCommand((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case COMMAND:
        return getCommand();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case COMMAND:
        return isSetCommand();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hql_query2_args)
        return this.equals((hql_query2_args)that);
      return false;
    }

    public boolean equals(hql_query2_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_command = true && this.isSetCommand();
      boolean that_present_command = true && that.isSetCommand();
      if (this_present_command || that_present_command) {
        if (!(this_present_command && that_present_command))
          return false;
        if (!this.command.equals(that.command))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ns = true;
      list.add(present_ns);
      if (present_ns)
        list.add(ns);

      boolean present_command = true && (isSetCommand());
      list.add(present_command);
      if (present_command)
        list.add(command);

      return list.hashCode();
    }

    @Override
    public int compareTo(hql_query2_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(other.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, other.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommand()).compareTo(other.isSetCommand());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommand()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.command, other.command);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hql_query2_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("command:");
      if (this.command == null) {
        sb.append("null");
      } else {
        sb.append(this.command);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hql_query2_argsStandardSchemeFactory implements SchemeFactory {
      public hql_query2_argsStandardScheme getScheme() {
        return new hql_query2_argsStandardScheme();
      }
    }

    private static class hql_query2_argsStandardScheme extends StandardScheme<hql_query2_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hql_query2_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.ns = iprot.readI64();
                struct.setNsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMMAND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.command = iprot.readString();
                struct.setCommandIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hql_query2_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NS_FIELD_DESC);
        oprot.writeI64(struct.ns);
        oprot.writeFieldEnd();
        if (struct.command != null) {
          oprot.writeFieldBegin(COMMAND_FIELD_DESC);
          oprot.writeString(struct.command);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hql_query2_argsTupleSchemeFactory implements SchemeFactory {
      public hql_query2_argsTupleScheme getScheme() {
        return new hql_query2_argsTupleScheme();
      }
    }

    private static class hql_query2_argsTupleScheme extends TupleScheme<hql_query2_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hql_query2_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNs()) {
          optionals.set(0);
        }
        if (struct.isSetCommand()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNs()) {
          oprot.writeI64(struct.ns);
        }
        if (struct.isSetCommand()) {
          oprot.writeString(struct.command);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hql_query2_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ns = iprot.readI64();
          struct.setNsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.command = iprot.readString();
          struct.setCommandIsSet(true);
        }
      }
    }

  }

  public static class hql_query2_result implements org.apache.thrift.TBase<hql_query2_result, hql_query2_result._Fields>, java.io.Serializable, Cloneable, Comparable<hql_query2_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hql_query2_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hql_query2_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hql_query2_resultTupleSchemeFactory());
    }

    public HqlResult2 success; // required
    public org.hypertable.thriftgen.ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HqlResult2.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hql_query2_result.class, metaDataMap);
    }

    public hql_query2_result() {
    }

    public hql_query2_result(
      HqlResult2 success,
      org.hypertable.thriftgen.ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hql_query2_result(hql_query2_result other) {
      if (other.isSetSuccess()) {
        this.success = new HqlResult2(other.success);
      }
      if (other.isSetE()) {
        this.e = new org.hypertable.thriftgen.ClientException(other.e);
      }
    }

    public hql_query2_result deepCopy() {
      return new hql_query2_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public HqlResult2 getSuccess() {
      return this.success;
    }

    public hql_query2_result setSuccess(HqlResult2 success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.hypertable.thriftgen.ClientException getE() {
      return this.e;
    }

    public hql_query2_result setE(org.hypertable.thriftgen.ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((HqlResult2)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((org.hypertable.thriftgen.ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hql_query2_result)
        return this.equals((hql_query2_result)that);
      return false;
    }

    public boolean equals(hql_query2_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(hql_query2_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hql_query2_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hql_query2_resultStandardSchemeFactory implements SchemeFactory {
      public hql_query2_resultStandardScheme getScheme() {
        return new hql_query2_resultStandardScheme();
      }
    }

    private static class hql_query2_resultStandardScheme extends StandardScheme<hql_query2_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hql_query2_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new HqlResult2();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new org.hypertable.thriftgen.ClientException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hql_query2_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hql_query2_resultTupleSchemeFactory implements SchemeFactory {
      public hql_query2_resultTupleScheme getScheme() {
        return new hql_query2_resultTupleScheme();
      }
    }

    private static class hql_query2_resultTupleScheme extends TupleScheme<hql_query2_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hql_query2_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hql_query2_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new HqlResult2();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new org.hypertable.thriftgen.ClientException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

}
