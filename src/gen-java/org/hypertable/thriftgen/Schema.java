/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.hypertable.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Describes a schema.
 * <dl>
 *   <dt>access_groups</dt>
 *   <dd>Map of access groups</dd>
 * 
 *   <dt>column_families</dt>
 *   <dd>Map of column families</dd>
 * </dl>
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2014-5-16")
public class Schema implements org.apache.thrift.TBase<Schema, Schema._Fields>, java.io.Serializable, Cloneable, Comparable<Schema> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Schema");

  private static final org.apache.thrift.protocol.TField ACCESS_GROUPS_FIELD_DESC = new org.apache.thrift.protocol.TField("access_groups", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField COLUMN_FAMILIES_FIELD_DESC = new org.apache.thrift.protocol.TField("column_families", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField GENERATION_FIELD_DESC = new org.apache.thrift.protocol.TField("generation", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField GROUP_COMMIT_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("group_commit_interval", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ACCESS_GROUP_DEFAULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("access_group_defaults", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField COLUMN_FAMILY_DEFAULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("column_family_defaults", org.apache.thrift.protocol.TType.STRUCT, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SchemaStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SchemaTupleSchemeFactory());
  }

  public Map<String,AccessGroupSpec> access_groups; // optional
  public Map<String,ColumnFamilySpec> column_families; // optional
  public long generation; // optional
  public int version; // optional
  public int group_commit_interval; // optional
  public AccessGroupOptions access_group_defaults; // optional
  public ColumnFamilyOptions column_family_defaults; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACCESS_GROUPS((short)1, "access_groups"),
    COLUMN_FAMILIES((short)2, "column_families"),
    GENERATION((short)3, "generation"),
    VERSION((short)4, "version"),
    GROUP_COMMIT_INTERVAL((short)5, "group_commit_interval"),
    ACCESS_GROUP_DEFAULTS((short)6, "access_group_defaults"),
    COLUMN_FAMILY_DEFAULTS((short)7, "column_family_defaults");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACCESS_GROUPS
          return ACCESS_GROUPS;
        case 2: // COLUMN_FAMILIES
          return COLUMN_FAMILIES;
        case 3: // GENERATION
          return GENERATION;
        case 4: // VERSION
          return VERSION;
        case 5: // GROUP_COMMIT_INTERVAL
          return GROUP_COMMIT_INTERVAL;
        case 6: // ACCESS_GROUP_DEFAULTS
          return ACCESS_GROUP_DEFAULTS;
        case 7: // COLUMN_FAMILY_DEFAULTS
          return COLUMN_FAMILY_DEFAULTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GENERATION_ISSET_ID = 0;
  private static final int __VERSION_ISSET_ID = 1;
  private static final int __GROUP_COMMIT_INTERVAL_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ACCESS_GROUPS,_Fields.COLUMN_FAMILIES,_Fields.GENERATION,_Fields.VERSION,_Fields.GROUP_COMMIT_INTERVAL,_Fields.ACCESS_GROUP_DEFAULTS,_Fields.COLUMN_FAMILY_DEFAULTS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACCESS_GROUPS, new org.apache.thrift.meta_data.FieldMetaData("access_groups", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AccessGroupSpec.class))));
    tmpMap.put(_Fields.COLUMN_FAMILIES, new org.apache.thrift.meta_data.FieldMetaData("column_families", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ColumnFamilySpec.class))));
    tmpMap.put(_Fields.GENERATION, new org.apache.thrift.meta_data.FieldMetaData("generation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GROUP_COMMIT_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("group_commit_interval", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCESS_GROUP_DEFAULTS, new org.apache.thrift.meta_data.FieldMetaData("access_group_defaults", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AccessGroupOptions.class)));
    tmpMap.put(_Fields.COLUMN_FAMILY_DEFAULTS, new org.apache.thrift.meta_data.FieldMetaData("column_family_defaults", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ColumnFamilyOptions.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Schema.class, metaDataMap);
  }

  public Schema() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Schema(Schema other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAccess_groups()) {
      Map<String,AccessGroupSpec> __this__access_groups = new HashMap<String,AccessGroupSpec>(other.access_groups.size());
      for (Map.Entry<String, AccessGroupSpec> other_element : other.access_groups.entrySet()) {

        String other_element_key = other_element.getKey();
        AccessGroupSpec other_element_value = other_element.getValue();

        String __this__access_groups_copy_key = other_element_key;

        AccessGroupSpec __this__access_groups_copy_value = new AccessGroupSpec(other_element_value);

        __this__access_groups.put(__this__access_groups_copy_key, __this__access_groups_copy_value);
      }
      this.access_groups = __this__access_groups;
    }
    if (other.isSetColumn_families()) {
      Map<String,ColumnFamilySpec> __this__column_families = new HashMap<String,ColumnFamilySpec>(other.column_families.size());
      for (Map.Entry<String, ColumnFamilySpec> other_element : other.column_families.entrySet()) {

        String other_element_key = other_element.getKey();
        ColumnFamilySpec other_element_value = other_element.getValue();

        String __this__column_families_copy_key = other_element_key;

        ColumnFamilySpec __this__column_families_copy_value = new ColumnFamilySpec(other_element_value);

        __this__column_families.put(__this__column_families_copy_key, __this__column_families_copy_value);
      }
      this.column_families = __this__column_families;
    }
    this.generation = other.generation;
    this.version = other.version;
    this.group_commit_interval = other.group_commit_interval;
    if (other.isSetAccess_group_defaults()) {
      this.access_group_defaults = new AccessGroupOptions(other.access_group_defaults);
    }
    if (other.isSetColumn_family_defaults()) {
      this.column_family_defaults = new ColumnFamilyOptions(other.column_family_defaults);
    }
  }

  public Schema deepCopy() {
    return new Schema(this);
  }

  @Override
  public void clear() {
    this.access_groups = null;
    this.column_families = null;
    setGenerationIsSet(false);
    this.generation = 0;
    setVersionIsSet(false);
    this.version = 0;
    setGroup_commit_intervalIsSet(false);
    this.group_commit_interval = 0;
    this.access_group_defaults = null;
    this.column_family_defaults = null;
  }

  public int getAccess_groupsSize() {
    return (this.access_groups == null) ? 0 : this.access_groups.size();
  }

  public void putToAccess_groups(String key, AccessGroupSpec val) {
    if (this.access_groups == null) {
      this.access_groups = new HashMap<String,AccessGroupSpec>();
    }
    this.access_groups.put(key, val);
  }

  public Map<String,AccessGroupSpec> getAccess_groups() {
    return this.access_groups;
  }

  public Schema setAccess_groups(Map<String,AccessGroupSpec> access_groups) {
    this.access_groups = access_groups;
    return this;
  }

  public void unsetAccess_groups() {
    this.access_groups = null;
  }

  /** Returns true if field access_groups is set (has been assigned a value) and false otherwise */
  public boolean isSetAccess_groups() {
    return this.access_groups != null;
  }

  public void setAccess_groupsIsSet(boolean value) {
    if (!value) {
      this.access_groups = null;
    }
  }

  public int getColumn_familiesSize() {
    return (this.column_families == null) ? 0 : this.column_families.size();
  }

  public void putToColumn_families(String key, ColumnFamilySpec val) {
    if (this.column_families == null) {
      this.column_families = new HashMap<String,ColumnFamilySpec>();
    }
    this.column_families.put(key, val);
  }

  public Map<String,ColumnFamilySpec> getColumn_families() {
    return this.column_families;
  }

  public Schema setColumn_families(Map<String,ColumnFamilySpec> column_families) {
    this.column_families = column_families;
    return this;
  }

  public void unsetColumn_families() {
    this.column_families = null;
  }

  /** Returns true if field column_families is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_families() {
    return this.column_families != null;
  }

  public void setColumn_familiesIsSet(boolean value) {
    if (!value) {
      this.column_families = null;
    }
  }

  public long getGeneration() {
    return this.generation;
  }

  public Schema setGeneration(long generation) {
    this.generation = generation;
    setGenerationIsSet(true);
    return this;
  }

  public void unsetGeneration() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GENERATION_ISSET_ID);
  }

  /** Returns true if field generation is set (has been assigned a value) and false otherwise */
  public boolean isSetGeneration() {
    return EncodingUtils.testBit(__isset_bitfield, __GENERATION_ISSET_ID);
  }

  public void setGenerationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GENERATION_ISSET_ID, value);
  }

  public int getVersion() {
    return this.version;
  }

  public Schema setVersion(int version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public int getGroup_commit_interval() {
    return this.group_commit_interval;
  }

  public Schema setGroup_commit_interval(int group_commit_interval) {
    this.group_commit_interval = group_commit_interval;
    setGroup_commit_intervalIsSet(true);
    return this;
  }

  public void unsetGroup_commit_interval() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUP_COMMIT_INTERVAL_ISSET_ID);
  }

  /** Returns true if field group_commit_interval is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup_commit_interval() {
    return EncodingUtils.testBit(__isset_bitfield, __GROUP_COMMIT_INTERVAL_ISSET_ID);
  }

  public void setGroup_commit_intervalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUP_COMMIT_INTERVAL_ISSET_ID, value);
  }

  public AccessGroupOptions getAccess_group_defaults() {
    return this.access_group_defaults;
  }

  public Schema setAccess_group_defaults(AccessGroupOptions access_group_defaults) {
    this.access_group_defaults = access_group_defaults;
    return this;
  }

  public void unsetAccess_group_defaults() {
    this.access_group_defaults = null;
  }

  /** Returns true if field access_group_defaults is set (has been assigned a value) and false otherwise */
  public boolean isSetAccess_group_defaults() {
    return this.access_group_defaults != null;
  }

  public void setAccess_group_defaultsIsSet(boolean value) {
    if (!value) {
      this.access_group_defaults = null;
    }
  }

  public ColumnFamilyOptions getColumn_family_defaults() {
    return this.column_family_defaults;
  }

  public Schema setColumn_family_defaults(ColumnFamilyOptions column_family_defaults) {
    this.column_family_defaults = column_family_defaults;
    return this;
  }

  public void unsetColumn_family_defaults() {
    this.column_family_defaults = null;
  }

  /** Returns true if field column_family_defaults is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_family_defaults() {
    return this.column_family_defaults != null;
  }

  public void setColumn_family_defaultsIsSet(boolean value) {
    if (!value) {
      this.column_family_defaults = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACCESS_GROUPS:
      if (value == null) {
        unsetAccess_groups();
      } else {
        setAccess_groups((Map<String,AccessGroupSpec>)value);
      }
      break;

    case COLUMN_FAMILIES:
      if (value == null) {
        unsetColumn_families();
      } else {
        setColumn_families((Map<String,ColumnFamilySpec>)value);
      }
      break;

    case GENERATION:
      if (value == null) {
        unsetGeneration();
      } else {
        setGeneration((Long)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Integer)value);
      }
      break;

    case GROUP_COMMIT_INTERVAL:
      if (value == null) {
        unsetGroup_commit_interval();
      } else {
        setGroup_commit_interval((Integer)value);
      }
      break;

    case ACCESS_GROUP_DEFAULTS:
      if (value == null) {
        unsetAccess_group_defaults();
      } else {
        setAccess_group_defaults((AccessGroupOptions)value);
      }
      break;

    case COLUMN_FAMILY_DEFAULTS:
      if (value == null) {
        unsetColumn_family_defaults();
      } else {
        setColumn_family_defaults((ColumnFamilyOptions)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACCESS_GROUPS:
      return getAccess_groups();

    case COLUMN_FAMILIES:
      return getColumn_families();

    case GENERATION:
      return Long.valueOf(getGeneration());

    case VERSION:
      return Integer.valueOf(getVersion());

    case GROUP_COMMIT_INTERVAL:
      return Integer.valueOf(getGroup_commit_interval());

    case ACCESS_GROUP_DEFAULTS:
      return getAccess_group_defaults();

    case COLUMN_FAMILY_DEFAULTS:
      return getColumn_family_defaults();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACCESS_GROUPS:
      return isSetAccess_groups();
    case COLUMN_FAMILIES:
      return isSetColumn_families();
    case GENERATION:
      return isSetGeneration();
    case VERSION:
      return isSetVersion();
    case GROUP_COMMIT_INTERVAL:
      return isSetGroup_commit_interval();
    case ACCESS_GROUP_DEFAULTS:
      return isSetAccess_group_defaults();
    case COLUMN_FAMILY_DEFAULTS:
      return isSetColumn_family_defaults();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Schema)
      return this.equals((Schema)that);
    return false;
  }

  public boolean equals(Schema that) {
    if (that == null)
      return false;

    boolean this_present_access_groups = true && this.isSetAccess_groups();
    boolean that_present_access_groups = true && that.isSetAccess_groups();
    if (this_present_access_groups || that_present_access_groups) {
      if (!(this_present_access_groups && that_present_access_groups))
        return false;
      if (!this.access_groups.equals(that.access_groups))
        return false;
    }

    boolean this_present_column_families = true && this.isSetColumn_families();
    boolean that_present_column_families = true && that.isSetColumn_families();
    if (this_present_column_families || that_present_column_families) {
      if (!(this_present_column_families && that_present_column_families))
        return false;
      if (!this.column_families.equals(that.column_families))
        return false;
    }

    boolean this_present_generation = true && this.isSetGeneration();
    boolean that_present_generation = true && that.isSetGeneration();
    if (this_present_generation || that_present_generation) {
      if (!(this_present_generation && that_present_generation))
        return false;
      if (this.generation != that.generation)
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_group_commit_interval = true && this.isSetGroup_commit_interval();
    boolean that_present_group_commit_interval = true && that.isSetGroup_commit_interval();
    if (this_present_group_commit_interval || that_present_group_commit_interval) {
      if (!(this_present_group_commit_interval && that_present_group_commit_interval))
        return false;
      if (this.group_commit_interval != that.group_commit_interval)
        return false;
    }

    boolean this_present_access_group_defaults = true && this.isSetAccess_group_defaults();
    boolean that_present_access_group_defaults = true && that.isSetAccess_group_defaults();
    if (this_present_access_group_defaults || that_present_access_group_defaults) {
      if (!(this_present_access_group_defaults && that_present_access_group_defaults))
        return false;
      if (!this.access_group_defaults.equals(that.access_group_defaults))
        return false;
    }

    boolean this_present_column_family_defaults = true && this.isSetColumn_family_defaults();
    boolean that_present_column_family_defaults = true && that.isSetColumn_family_defaults();
    if (this_present_column_family_defaults || that_present_column_family_defaults) {
      if (!(this_present_column_family_defaults && that_present_column_family_defaults))
        return false;
      if (!this.column_family_defaults.equals(that.column_family_defaults))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_access_groups = true && (isSetAccess_groups());
    list.add(present_access_groups);
    if (present_access_groups)
      list.add(access_groups);

    boolean present_column_families = true && (isSetColumn_families());
    list.add(present_column_families);
    if (present_column_families)
      list.add(column_families);

    boolean present_generation = true && (isSetGeneration());
    list.add(present_generation);
    if (present_generation)
      list.add(generation);

    boolean present_version = true && (isSetVersion());
    list.add(present_version);
    if (present_version)
      list.add(version);

    boolean present_group_commit_interval = true && (isSetGroup_commit_interval());
    list.add(present_group_commit_interval);
    if (present_group_commit_interval)
      list.add(group_commit_interval);

    boolean present_access_group_defaults = true && (isSetAccess_group_defaults());
    list.add(present_access_group_defaults);
    if (present_access_group_defaults)
      list.add(access_group_defaults);

    boolean present_column_family_defaults = true && (isSetColumn_family_defaults());
    list.add(present_column_family_defaults);
    if (present_column_family_defaults)
      list.add(column_family_defaults);

    return list.hashCode();
  }

  @Override
  public int compareTo(Schema other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAccess_groups()).compareTo(other.isSetAccess_groups());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccess_groups()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_groups, other.access_groups);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumn_families()).compareTo(other.isSetColumn_families());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_families()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_families, other.column_families);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGeneration()).compareTo(other.isSetGeneration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeneration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generation, other.generation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroup_commit_interval()).compareTo(other.isSetGroup_commit_interval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup_commit_interval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group_commit_interval, other.group_commit_interval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccess_group_defaults()).compareTo(other.isSetAccess_group_defaults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccess_group_defaults()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_group_defaults, other.access_group_defaults);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumn_family_defaults()).compareTo(other.isSetColumn_family_defaults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_family_defaults()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_family_defaults, other.column_family_defaults);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Schema(");
    boolean first = true;

    if (isSetAccess_groups()) {
      sb.append("access_groups:");
      if (this.access_groups == null) {
        sb.append("null");
      } else {
        sb.append(this.access_groups);
      }
      first = false;
    }
    if (isSetColumn_families()) {
      if (!first) sb.append(", ");
      sb.append("column_families:");
      if (this.column_families == null) {
        sb.append("null");
      } else {
        sb.append(this.column_families);
      }
      first = false;
    }
    if (isSetGeneration()) {
      if (!first) sb.append(", ");
      sb.append("generation:");
      sb.append(this.generation);
      first = false;
    }
    if (isSetVersion()) {
      if (!first) sb.append(", ");
      sb.append("version:");
      sb.append(this.version);
      first = false;
    }
    if (isSetGroup_commit_interval()) {
      if (!first) sb.append(", ");
      sb.append("group_commit_interval:");
      sb.append(this.group_commit_interval);
      first = false;
    }
    if (isSetAccess_group_defaults()) {
      if (!first) sb.append(", ");
      sb.append("access_group_defaults:");
      if (this.access_group_defaults == null) {
        sb.append("null");
      } else {
        sb.append(this.access_group_defaults);
      }
      first = false;
    }
    if (isSetColumn_family_defaults()) {
      if (!first) sb.append(", ");
      sb.append("column_family_defaults:");
      if (this.column_family_defaults == null) {
        sb.append("null");
      } else {
        sb.append(this.column_family_defaults);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (access_group_defaults != null) {
      access_group_defaults.validate();
    }
    if (column_family_defaults != null) {
      column_family_defaults.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SchemaStandardSchemeFactory implements SchemeFactory {
    public SchemaStandardScheme getScheme() {
      return new SchemaStandardScheme();
    }
  }

  private static class SchemaStandardScheme extends StandardScheme<Schema> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Schema struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACCESS_GROUPS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map56 = iprot.readMapBegin();
                struct.access_groups = new HashMap<String,AccessGroupSpec>(2*_map56.size);
                String _key57;
                AccessGroupSpec _val58;
                for (int _i59 = 0; _i59 < _map56.size; ++_i59)
                {
                  _key57 = iprot.readString();
                  _val58 = new AccessGroupSpec();
                  _val58.read(iprot);
                  struct.access_groups.put(_key57, _val58);
                }
                iprot.readMapEnd();
              }
              struct.setAccess_groupsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLUMN_FAMILIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map60 = iprot.readMapBegin();
                struct.column_families = new HashMap<String,ColumnFamilySpec>(2*_map60.size);
                String _key61;
                ColumnFamilySpec _val62;
                for (int _i63 = 0; _i63 < _map60.size; ++_i63)
                {
                  _key61 = iprot.readString();
                  _val62 = new ColumnFamilySpec();
                  _val62.read(iprot);
                  struct.column_families.put(_key61, _val62);
                }
                iprot.readMapEnd();
              }
              struct.setColumn_familiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GENERATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.generation = iprot.readI64();
              struct.setGenerationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = iprot.readI32();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GROUP_COMMIT_INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.group_commit_interval = iprot.readI32();
              struct.setGroup_commit_intervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ACCESS_GROUP_DEFAULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.access_group_defaults = new AccessGroupOptions();
              struct.access_group_defaults.read(iprot);
              struct.setAccess_group_defaultsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COLUMN_FAMILY_DEFAULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.column_family_defaults = new ColumnFamilyOptions();
              struct.column_family_defaults.read(iprot);
              struct.setColumn_family_defaultsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Schema struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.access_groups != null) {
        if (struct.isSetAccess_groups()) {
          oprot.writeFieldBegin(ACCESS_GROUPS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.access_groups.size()));
            for (Map.Entry<String, AccessGroupSpec> _iter64 : struct.access_groups.entrySet())
            {
              oprot.writeString(_iter64.getKey());
              _iter64.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.column_families != null) {
        if (struct.isSetColumn_families()) {
          oprot.writeFieldBegin(COLUMN_FAMILIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.column_families.size()));
            for (Map.Entry<String, ColumnFamilySpec> _iter65 : struct.column_families.entrySet())
            {
              oprot.writeString(_iter65.getKey());
              _iter65.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetGeneration()) {
        oprot.writeFieldBegin(GENERATION_FIELD_DESC);
        oprot.writeI64(struct.generation);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVersion()) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI32(struct.version);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGroup_commit_interval()) {
        oprot.writeFieldBegin(GROUP_COMMIT_INTERVAL_FIELD_DESC);
        oprot.writeI32(struct.group_commit_interval);
        oprot.writeFieldEnd();
      }
      if (struct.access_group_defaults != null) {
        if (struct.isSetAccess_group_defaults()) {
          oprot.writeFieldBegin(ACCESS_GROUP_DEFAULTS_FIELD_DESC);
          struct.access_group_defaults.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.column_family_defaults != null) {
        if (struct.isSetColumn_family_defaults()) {
          oprot.writeFieldBegin(COLUMN_FAMILY_DEFAULTS_FIELD_DESC);
          struct.column_family_defaults.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SchemaTupleSchemeFactory implements SchemeFactory {
    public SchemaTupleScheme getScheme() {
      return new SchemaTupleScheme();
    }
  }

  private static class SchemaTupleScheme extends TupleScheme<Schema> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Schema struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAccess_groups()) {
        optionals.set(0);
      }
      if (struct.isSetColumn_families()) {
        optionals.set(1);
      }
      if (struct.isSetGeneration()) {
        optionals.set(2);
      }
      if (struct.isSetVersion()) {
        optionals.set(3);
      }
      if (struct.isSetGroup_commit_interval()) {
        optionals.set(4);
      }
      if (struct.isSetAccess_group_defaults()) {
        optionals.set(5);
      }
      if (struct.isSetColumn_family_defaults()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetAccess_groups()) {
        {
          oprot.writeI32(struct.access_groups.size());
          for (Map.Entry<String, AccessGroupSpec> _iter66 : struct.access_groups.entrySet())
          {
            oprot.writeString(_iter66.getKey());
            _iter66.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetColumn_families()) {
        {
          oprot.writeI32(struct.column_families.size());
          for (Map.Entry<String, ColumnFamilySpec> _iter67 : struct.column_families.entrySet())
          {
            oprot.writeString(_iter67.getKey());
            _iter67.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetGeneration()) {
        oprot.writeI64(struct.generation);
      }
      if (struct.isSetVersion()) {
        oprot.writeI32(struct.version);
      }
      if (struct.isSetGroup_commit_interval()) {
        oprot.writeI32(struct.group_commit_interval);
      }
      if (struct.isSetAccess_group_defaults()) {
        struct.access_group_defaults.write(oprot);
      }
      if (struct.isSetColumn_family_defaults()) {
        struct.column_family_defaults.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Schema struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map68 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.access_groups = new HashMap<String,AccessGroupSpec>(2*_map68.size);
          String _key69;
          AccessGroupSpec _val70;
          for (int _i71 = 0; _i71 < _map68.size; ++_i71)
          {
            _key69 = iprot.readString();
            _val70 = new AccessGroupSpec();
            _val70.read(iprot);
            struct.access_groups.put(_key69, _val70);
          }
        }
        struct.setAccess_groupsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map72 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.column_families = new HashMap<String,ColumnFamilySpec>(2*_map72.size);
          String _key73;
          ColumnFamilySpec _val74;
          for (int _i75 = 0; _i75 < _map72.size; ++_i75)
          {
            _key73 = iprot.readString();
            _val74 = new ColumnFamilySpec();
            _val74.read(iprot);
            struct.column_families.put(_key73, _val74);
          }
        }
        struct.setColumn_familiesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.generation = iprot.readI64();
        struct.setGenerationIsSet(true);
      }
      if (incoming.get(3)) {
        struct.version = iprot.readI32();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.group_commit_interval = iprot.readI32();
        struct.setGroup_commit_intervalIsSet(true);
      }
      if (incoming.get(5)) {
        struct.access_group_defaults = new AccessGroupOptions();
        struct.access_group_defaults.read(iprot);
        struct.setAccess_group_defaultsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.column_family_defaults = new ColumnFamilyOptions();
        struct.column_family_defaults.read(iprot);
        struct.setColumn_family_defaultsIsSet(true);
      }
    }
  }

}

