/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.hypertable.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2014-5-16")
public class AccessGroupOptions implements org.apache.thrift.TBase<AccessGroupOptions, AccessGroupOptions._Fields>, java.io.Serializable, Cloneable, Comparable<AccessGroupOptions> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AccessGroupOptions");

  private static final org.apache.thrift.protocol.TField REPLICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("replication", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField BLOCKSIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("blocksize", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField COMPRESSOR_FIELD_DESC = new org.apache.thrift.protocol.TField("compressor", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BLOOM_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("bloom_filter", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField IN_MEMORY_FIELD_DESC = new org.apache.thrift.protocol.TField("in_memory", org.apache.thrift.protocol.TType.BOOL, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AccessGroupOptionsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AccessGroupOptionsTupleSchemeFactory());
  }

  public short replication; // optional
  public int blocksize; // optional
  public String compressor; // optional
  public String bloom_filter; // optional
  public boolean in_memory; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REPLICATION((short)1, "replication"),
    BLOCKSIZE((short)2, "blocksize"),
    COMPRESSOR((short)3, "compressor"),
    BLOOM_FILTER((short)4, "bloom_filter"),
    IN_MEMORY((short)5, "in_memory");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REPLICATION
          return REPLICATION;
        case 2: // BLOCKSIZE
          return BLOCKSIZE;
        case 3: // COMPRESSOR
          return COMPRESSOR;
        case 4: // BLOOM_FILTER
          return BLOOM_FILTER;
        case 5: // IN_MEMORY
          return IN_MEMORY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REPLICATION_ISSET_ID = 0;
  private static final int __BLOCKSIZE_ISSET_ID = 1;
  private static final int __IN_MEMORY_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.REPLICATION,_Fields.BLOCKSIZE,_Fields.COMPRESSOR,_Fields.BLOOM_FILTER,_Fields.IN_MEMORY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REPLICATION, new org.apache.thrift.meta_data.FieldMetaData("replication", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.BLOCKSIZE, new org.apache.thrift.meta_data.FieldMetaData("blocksize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPRESSOR, new org.apache.thrift.meta_data.FieldMetaData("compressor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BLOOM_FILTER, new org.apache.thrift.meta_data.FieldMetaData("bloom_filter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IN_MEMORY, new org.apache.thrift.meta_data.FieldMetaData("in_memory", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AccessGroupOptions.class, metaDataMap);
  }

  public AccessGroupOptions() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AccessGroupOptions(AccessGroupOptions other) {
    __isset_bitfield = other.__isset_bitfield;
    this.replication = other.replication;
    this.blocksize = other.blocksize;
    if (other.isSetCompressor()) {
      this.compressor = other.compressor;
    }
    if (other.isSetBloom_filter()) {
      this.bloom_filter = other.bloom_filter;
    }
    this.in_memory = other.in_memory;
  }

  public AccessGroupOptions deepCopy() {
    return new AccessGroupOptions(this);
  }

  @Override
  public void clear() {
    setReplicationIsSet(false);
    this.replication = 0;
    setBlocksizeIsSet(false);
    this.blocksize = 0;
    this.compressor = null;
    this.bloom_filter = null;
    setIn_memoryIsSet(false);
    this.in_memory = false;
  }

  public short getReplication() {
    return this.replication;
  }

  public AccessGroupOptions setReplication(short replication) {
    this.replication = replication;
    setReplicationIsSet(true);
    return this;
  }

  public void unsetReplication() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPLICATION_ISSET_ID);
  }

  /** Returns true if field replication is set (has been assigned a value) and false otherwise */
  public boolean isSetReplication() {
    return EncodingUtils.testBit(__isset_bitfield, __REPLICATION_ISSET_ID);
  }

  public void setReplicationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPLICATION_ISSET_ID, value);
  }

  public int getBlocksize() {
    return this.blocksize;
  }

  public AccessGroupOptions setBlocksize(int blocksize) {
    this.blocksize = blocksize;
    setBlocksizeIsSet(true);
    return this;
  }

  public void unsetBlocksize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOCKSIZE_ISSET_ID);
  }

  /** Returns true if field blocksize is set (has been assigned a value) and false otherwise */
  public boolean isSetBlocksize() {
    return EncodingUtils.testBit(__isset_bitfield, __BLOCKSIZE_ISSET_ID);
  }

  public void setBlocksizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOCKSIZE_ISSET_ID, value);
  }

  public String getCompressor() {
    return this.compressor;
  }

  public AccessGroupOptions setCompressor(String compressor) {
    this.compressor = compressor;
    return this;
  }

  public void unsetCompressor() {
    this.compressor = null;
  }

  /** Returns true if field compressor is set (has been assigned a value) and false otherwise */
  public boolean isSetCompressor() {
    return this.compressor != null;
  }

  public void setCompressorIsSet(boolean value) {
    if (!value) {
      this.compressor = null;
    }
  }

  public String getBloom_filter() {
    return this.bloom_filter;
  }

  public AccessGroupOptions setBloom_filter(String bloom_filter) {
    this.bloom_filter = bloom_filter;
    return this;
  }

  public void unsetBloom_filter() {
    this.bloom_filter = null;
  }

  /** Returns true if field bloom_filter is set (has been assigned a value) and false otherwise */
  public boolean isSetBloom_filter() {
    return this.bloom_filter != null;
  }

  public void setBloom_filterIsSet(boolean value) {
    if (!value) {
      this.bloom_filter = null;
    }
  }

  public boolean isIn_memory() {
    return this.in_memory;
  }

  public AccessGroupOptions setIn_memory(boolean in_memory) {
    this.in_memory = in_memory;
    setIn_memoryIsSet(true);
    return this;
  }

  public void unsetIn_memory() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IN_MEMORY_ISSET_ID);
  }

  /** Returns true if field in_memory is set (has been assigned a value) and false otherwise */
  public boolean isSetIn_memory() {
    return EncodingUtils.testBit(__isset_bitfield, __IN_MEMORY_ISSET_ID);
  }

  public void setIn_memoryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IN_MEMORY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REPLICATION:
      if (value == null) {
        unsetReplication();
      } else {
        setReplication((Short)value);
      }
      break;

    case BLOCKSIZE:
      if (value == null) {
        unsetBlocksize();
      } else {
        setBlocksize((Integer)value);
      }
      break;

    case COMPRESSOR:
      if (value == null) {
        unsetCompressor();
      } else {
        setCompressor((String)value);
      }
      break;

    case BLOOM_FILTER:
      if (value == null) {
        unsetBloom_filter();
      } else {
        setBloom_filter((String)value);
      }
      break;

    case IN_MEMORY:
      if (value == null) {
        unsetIn_memory();
      } else {
        setIn_memory((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REPLICATION:
      return Short.valueOf(getReplication());

    case BLOCKSIZE:
      return Integer.valueOf(getBlocksize());

    case COMPRESSOR:
      return getCompressor();

    case BLOOM_FILTER:
      return getBloom_filter();

    case IN_MEMORY:
      return Boolean.valueOf(isIn_memory());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REPLICATION:
      return isSetReplication();
    case BLOCKSIZE:
      return isSetBlocksize();
    case COMPRESSOR:
      return isSetCompressor();
    case BLOOM_FILTER:
      return isSetBloom_filter();
    case IN_MEMORY:
      return isSetIn_memory();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AccessGroupOptions)
      return this.equals((AccessGroupOptions)that);
    return false;
  }

  public boolean equals(AccessGroupOptions that) {
    if (that == null)
      return false;

    boolean this_present_replication = true && this.isSetReplication();
    boolean that_present_replication = true && that.isSetReplication();
    if (this_present_replication || that_present_replication) {
      if (!(this_present_replication && that_present_replication))
        return false;
      if (this.replication != that.replication)
        return false;
    }

    boolean this_present_blocksize = true && this.isSetBlocksize();
    boolean that_present_blocksize = true && that.isSetBlocksize();
    if (this_present_blocksize || that_present_blocksize) {
      if (!(this_present_blocksize && that_present_blocksize))
        return false;
      if (this.blocksize != that.blocksize)
        return false;
    }

    boolean this_present_compressor = true && this.isSetCompressor();
    boolean that_present_compressor = true && that.isSetCompressor();
    if (this_present_compressor || that_present_compressor) {
      if (!(this_present_compressor && that_present_compressor))
        return false;
      if (!this.compressor.equals(that.compressor))
        return false;
    }

    boolean this_present_bloom_filter = true && this.isSetBloom_filter();
    boolean that_present_bloom_filter = true && that.isSetBloom_filter();
    if (this_present_bloom_filter || that_present_bloom_filter) {
      if (!(this_present_bloom_filter && that_present_bloom_filter))
        return false;
      if (!this.bloom_filter.equals(that.bloom_filter))
        return false;
    }

    boolean this_present_in_memory = true && this.isSetIn_memory();
    boolean that_present_in_memory = true && that.isSetIn_memory();
    if (this_present_in_memory || that_present_in_memory) {
      if (!(this_present_in_memory && that_present_in_memory))
        return false;
      if (this.in_memory != that.in_memory)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_replication = true && (isSetReplication());
    list.add(present_replication);
    if (present_replication)
      list.add(replication);

    boolean present_blocksize = true && (isSetBlocksize());
    list.add(present_blocksize);
    if (present_blocksize)
      list.add(blocksize);

    boolean present_compressor = true && (isSetCompressor());
    list.add(present_compressor);
    if (present_compressor)
      list.add(compressor);

    boolean present_bloom_filter = true && (isSetBloom_filter());
    list.add(present_bloom_filter);
    if (present_bloom_filter)
      list.add(bloom_filter);

    boolean present_in_memory = true && (isSetIn_memory());
    list.add(present_in_memory);
    if (present_in_memory)
      list.add(in_memory);

    return list.hashCode();
  }

  @Override
  public int compareTo(AccessGroupOptions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetReplication()).compareTo(other.isSetReplication());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplication()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replication, other.replication);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlocksize()).compareTo(other.isSetBlocksize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlocksize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blocksize, other.blocksize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompressor()).compareTo(other.isSetCompressor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompressor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compressor, other.compressor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBloom_filter()).compareTo(other.isSetBloom_filter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBloom_filter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bloom_filter, other.bloom_filter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIn_memory()).compareTo(other.isSetIn_memory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIn_memory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.in_memory, other.in_memory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AccessGroupOptions(");
    boolean first = true;

    if (isSetReplication()) {
      sb.append("replication:");
      sb.append(this.replication);
      first = false;
    }
    if (isSetBlocksize()) {
      if (!first) sb.append(", ");
      sb.append("blocksize:");
      sb.append(this.blocksize);
      first = false;
    }
    if (isSetCompressor()) {
      if (!first) sb.append(", ");
      sb.append("compressor:");
      if (this.compressor == null) {
        sb.append("null");
      } else {
        sb.append(this.compressor);
      }
      first = false;
    }
    if (isSetBloom_filter()) {
      if (!first) sb.append(", ");
      sb.append("bloom_filter:");
      if (this.bloom_filter == null) {
        sb.append("null");
      } else {
        sb.append(this.bloom_filter);
      }
      first = false;
    }
    if (isSetIn_memory()) {
      if (!first) sb.append(", ");
      sb.append("in_memory:");
      sb.append(this.in_memory);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AccessGroupOptionsStandardSchemeFactory implements SchemeFactory {
    public AccessGroupOptionsStandardScheme getScheme() {
      return new AccessGroupOptionsStandardScheme();
    }
  }

  private static class AccessGroupOptionsStandardScheme extends StandardScheme<AccessGroupOptions> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AccessGroupOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REPLICATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.replication = iprot.readI16();
              struct.setReplicationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BLOCKSIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.blocksize = iprot.readI32();
              struct.setBlocksizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMPRESSOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.compressor = iprot.readString();
              struct.setCompressorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BLOOM_FILTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bloom_filter = iprot.readString();
              struct.setBloom_filterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IN_MEMORY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.in_memory = iprot.readBool();
              struct.setIn_memoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AccessGroupOptions struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetReplication()) {
        oprot.writeFieldBegin(REPLICATION_FIELD_DESC);
        oprot.writeI16(struct.replication);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBlocksize()) {
        oprot.writeFieldBegin(BLOCKSIZE_FIELD_DESC);
        oprot.writeI32(struct.blocksize);
        oprot.writeFieldEnd();
      }
      if (struct.compressor != null) {
        if (struct.isSetCompressor()) {
          oprot.writeFieldBegin(COMPRESSOR_FIELD_DESC);
          oprot.writeString(struct.compressor);
          oprot.writeFieldEnd();
        }
      }
      if (struct.bloom_filter != null) {
        if (struct.isSetBloom_filter()) {
          oprot.writeFieldBegin(BLOOM_FILTER_FIELD_DESC);
          oprot.writeString(struct.bloom_filter);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIn_memory()) {
        oprot.writeFieldBegin(IN_MEMORY_FIELD_DESC);
        oprot.writeBool(struct.in_memory);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AccessGroupOptionsTupleSchemeFactory implements SchemeFactory {
    public AccessGroupOptionsTupleScheme getScheme() {
      return new AccessGroupOptionsTupleScheme();
    }
  }

  private static class AccessGroupOptionsTupleScheme extends TupleScheme<AccessGroupOptions> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AccessGroupOptions struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetReplication()) {
        optionals.set(0);
      }
      if (struct.isSetBlocksize()) {
        optionals.set(1);
      }
      if (struct.isSetCompressor()) {
        optionals.set(2);
      }
      if (struct.isSetBloom_filter()) {
        optionals.set(3);
      }
      if (struct.isSetIn_memory()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetReplication()) {
        oprot.writeI16(struct.replication);
      }
      if (struct.isSetBlocksize()) {
        oprot.writeI32(struct.blocksize);
      }
      if (struct.isSetCompressor()) {
        oprot.writeString(struct.compressor);
      }
      if (struct.isSetBloom_filter()) {
        oprot.writeString(struct.bloom_filter);
      }
      if (struct.isSetIn_memory()) {
        oprot.writeBool(struct.in_memory);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AccessGroupOptions struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.replication = iprot.readI16();
        struct.setReplicationIsSet(true);
      }
      if (incoming.get(1)) {
        struct.blocksize = iprot.readI32();
        struct.setBlocksizeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.compressor = iprot.readString();
        struct.setCompressorIsSet(true);
      }
      if (incoming.get(3)) {
        struct.bloom_filter = iprot.readString();
        struct.setBloom_filterIsSet(true);
      }
      if (incoming.get(4)) {
        struct.in_memory = iprot.readBool();
        struct.setIn_memoryIsSet(true);
      }
    }
  }

}

